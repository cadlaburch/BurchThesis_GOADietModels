for(i in 1:length(pred_list)) {
for(j in 1:length(prey_list)) {
samplesize[1, j+2] <- prey_list[[j]] #column names
samplesize[i+1, 2] <- nrow(pred_list[[i]]) #total stomachs
samplesize[i+1, j+2] <- sum(pred_list[[i]]$prey_list[[j]])
}
}
samplesize[i+1, j+2] <- sum(pred_list[[i]]$"prey_list[[j]]")
for(i in 1:length(pred_list)) {
for(j in 1:length(prey_list)) {
samplesize[1, j+2] <- prey_list[[j]] #column names
samplesize[i+1, 2] <- nrow(pred_list[[i]]) #total stomachs
samplesize[i+1, j+2] <- sum(pred_list[[i]]$"prey_list[[j]]")
}
}
samplesize[i+1, 3] <- sum(pred_list[[i]]$Euphausiacea)
for(i in 1:length(pred_list)) {
for(j in 1:length(prey_list)) {
samplesize[1, j+2] <- prey_list[[j]] #column names
samplesize[i+1, 2] <- nrow(pred_list[[i]]) #total stomachs
samplesize[i+1, 3] <- sum(pred_list[[i]]$Euphausiacea)
}
}
sum(PC$Euphausiacea)
for(i in 1:length(pred_list)) {
for(j in 1:length(prey_list)) {
samplesize[1, j+2] <- prey_list[[j]] #column names
samplesize[i+1, 2] <- nrow(pred_list[[i]]) #total stomachs
samplesize[i+1, 3] <- sum(pred_list[[i]]$Euphausiacea)
samplesize[i+1, 4]<- sum(pred_list[[i]]$Walleyepollock)
samplesize[i+1, 4]<- sum(pred_list[[i]]$Ammodytidae)
samplesize[i+1, 4]<- sum(pred_list[[i]]$Clupeoidei)
samplesize[i+1, 4]<- sum(pred_list[[i]]$Osmerid)
}
}
for(i in 1:length(pred_list)) {
for(j in 1:length(prey_list)) {
samplesize[1, j+2] <- prey_list[[j]] #column names
samplesize[i+1, 2] <- nrow(pred_list[[i]]) #total stomachs
samplesize[i+1, 3] <- sum(pred_list[[i]]$Euphausiacea)
samplesize[i+1, 4]<- sum(pred_list[[i]]$Walleyepollock)
samplesize[i+1, 5]<- sum(pred_list[[i]]$Ammodytidae)
samplesize[i+1, 6]<- sum(pred_list[[i]]$Clupeoidei)
samplesize[i+1, 7]<- sum(pred_list[[i]]$Osmerid)
}
}
sum(AF$Osmerid)
pred_list <- list(AF, PH, PC, WP)
for(i in 1:length(pred_list)) {
for(j in 1:length(prey_list)) {
samplesize[1, j+2] <- prey_list[[j]] #column names
samplesize[i+1, 2] <- nrow(pred_list[[i]]) #total stomachs
samplesize[i+1, 3] <- sum(pred_list[[i]]$Euphausiacea)
samplesize[i+1, 4]<- sum(pred_list[[i]]$Walleyepollock)
samplesize[i+1, 5]<- sum(pred_list[[i]]$Ammodytidae)
samplesize[i+1, 6]<- sum(pred_list[[i]]$Clupeoidei)
samplesize[i+1, 7]<- sum(pred_list[[i]]$Osmerid)
}
}
samplesize[1, j+2] <- prey_list[[j]] "Occurance" #column names
for(i in 1:length(pred_list)) {
for(j in 1:length(prey_list)) {
samplesize[1, j+2] <- prey_list[[j]] + "Occurance" #column names
samplesize[i+1, 2] <- nrow(pred_list[[i]]) #total stomachs
samplesize[i+1, 3] <- sum(pred_list[[i]]$Euphausiacea)
samplesize[i+1, 4]<- sum(pred_list[[i]]$Walleyepollock)
samplesize[i+1, 5]<- sum(pred_list[[i]]$Ammodytidae)
samplesize[i+1, 6]<- sum(pred_list[[i]]$Clupeoidei)
samplesize[i+1, 7]<- sum(pred_list[[i]]$Osmerid)
}
}
samplesizet <- as.data.frame(samplesize)
samplesizet
View(samplesizet)
colnames(samplesize) <- c("", "Total stomachs sampled", "Euphausiacea", "Walleyepollock", "Ammodytidae", "Clupeoidei", "Osmeridae")
colnames(samplesize) <- c("Predator name", "Total stomachs sampled", "Euphausiacea", "Walleyepollock", "Ammodytidae", "Clupeoidei", "Osmeridae")
samplesize <- matrix(NA, nrow = 4, ncol = 7)
samplesize[1,1] <- "Arrowtooth flounder"
samplesize[2,1] <- "Pacific halibut"
samplesize[3,1] <- "Pacific cod"
samplesize[4,1] <- "Walleye pollock"
colnames(samplesize) <- c("Predator name", "Total stomachs sampled", "Euphausiacea", "Walleyepollock", "Ammodytidae", "Clupeoidei", "Osmeridae")
for(i in 1:length(pred_list)) {
for(j in 1:length(prey_list)) {
samplesize[1, j+2] <- prey_list[[j]] #column names
samplesize[i, 2] <- nrow(pred_list[[i]]) #total stomachs
samplesize[i, 3] <- sum(pred_list[[i]]$Euphausiacea)
samplesize[i, 4]<- sum(pred_list[[i]]$Walleyepollock)
samplesize[i, 5]<- sum(pred_list[[i]]$Ammodytidae)
samplesize[i, 6]<- sum(pred_list[[i]]$Clupeoidei)
samplesize[i, 7]<- sum(pred_list[[i]]$Osmerid)
}
}
for(i in 1:length(pred_list)) {
for(j in 1:length(prey_list)) {
samplesize[i, 2] <- nrow(pred_list[[i]]) #total stomachs
samplesize[i, 3] <- sum(pred_list[[i]]$Euphausiacea)
samplesize[i, 4]<- sum(pred_list[[i]]$Walleyepollock)
samplesize[i, 5]<- sum(pred_list[[i]]$Ammodytidae)
samplesize[i, 6]<- sum(pred_list[[i]]$Clupeoidei)
samplesize[i, 7]<- sum(pred_list[[i]]$Osmerid)
}
}
samplesize <- as.data.frame(samplesize)
library(write_xlsx) #for exporting
install.packages("writexl")
library(writexl) #for exporting
write.csv(samplesize, here("output/summary_tables/samplesizemodels.csv"), row.names = F)
#-------------------------------
#PREY:  EUPHAUSIACEA
#PRED: Walleye Pollock
#Full Model
Euph_WP_M <- gam(Euphausiacea ~ Year + s(RLONG, RLAT) + s(GEAR_DEPTH)+ s(GEAR_TEMP, k = 4) + Len_bin,
data = WP,
family = binomial(link = logit), #logistic scale
method = "GCV.Cp")
choose.k(Euphausiacea$GEAR_DEPTH)
#-------------------------------
#PREY:  EUPHAUSIACEA
#PRED: Walleye Pollock
#Full Model
Euph_WP_M <- gam(Euphausiacea ~ Year + s(RLONG, RLAT) + s(GEAR_DEPTH)+ s(GEAR_TEMP, k = 4) + Len_bin,
data = WP,
family = binomial(link = logit), #logistic scale
method = "GCV.Cp")
summary(Euph_WP_M)
#Comparing Delta AIC of alternative Models
Euph_WP_fit <- dredge(Euph_WP_M, beta = F, evaluate = T, rank = "AIC", trace = F)
class(Euph_WP_fit)
Euph_WP_fit <- as.data.frame(Euph_WP_fit)
write.csv(Euph_WP_fit, here("output/Models/Pollock_eat_Euph_AIC.csv"), row.names = F)
# Residudal diagnostics
par(mfrow=c(2,2))
gam.check(Euph_WP_M)
concurvity(Euph_WP_M, full = T)
concurvity(Euph_WP_M, full = F)
sum(residuals(Euph_WP_M, type = "pearson")^2) / df.residual(Euph_WP_M)
#Plotting partial effects
Euph_WP_Plot1 <- visreg(Euph_WP_M, "Year",type = "conditional", scale = "response", #scale creates plot based on probability not log odds
gg = TRUE, line=list(col="black"), xlab = "Year", ylab = "Partial Effect on Euphausiacea P/A") +
theme_classic() +
theme(axis.text.x = element_text(angle = -45))
library(here) #for finding working directory
library(readr) #for loading CSV
library(writexl) #for exporting
library(tidyverse)
library(mgcv) #for running gams
library(MuMIn) #for the dredge summary table
library(patchwork) #for combining plots
library(gridExtra) #for laying out plots
options(na.action = "na.fail")
?visreg
??visreg
library(visreg) #for visualizing partial effects
#-------------------------------
#PREY:  EUPHAUSIACEA
#PRED: Walleye Pollock
#Full Model
Euph_WP_M <- gam(Euphausiacea ~ Year + s(RLONG, RLAT) + s(GEAR_DEPTH)+ s(GEAR_TEMP, k = 4) + Len_bin,
data = WP,
family = binomial(link = logit), #logistic scale
method = "GCV.Cp")
summary(Euph_WP_M)
#Comparing Delta AIC of alternative Models
Euph_WP_fit <- dredge(Euph_WP_M, beta = F, evaluate = T, rank = "AIC", trace = F)
class(Euph_WP_fit)
Euph_WP_fit <- as.data.frame(Euph_WP_fit)
write.csv(Euph_WP_fit, here("output/Models/Pollock_eat_Euph_AIC.csv"), row.names = F)
# Residudal diagnostics
par(mfrow=c(2,2))
gam.check(Euph_WP_M)
concurvity(Euph_WP_M, full = T)
concurvity(Euph_WP_M, full = F)
sum(residuals(Euph_WP_M, type = "pearson")^2) / df.residual(Euph_WP_M)
#Plotting partial effects
Euph_WP_Plot1 <- visreg(Euph_WP_M, "Year",type = "conditional", scale = "response", #scale creates plot based on probability not log odds
gg = TRUE, line=list(col="black"), xlab = "Year", ylab = "Partial Effect on Euphausiacea P/A") +
theme_classic() +
theme(axis.text.x = element_text(angle = -45))
Euph_WP_Plot2 <- visreg(Euph_WP_M, "GEAR_DEPTH",type = "conditional", scale = "response",
gg = TRUE, line=list(col="black"), xlab = "Gear_Depth", ylab = "") +
theme_classic()
Euph_WP_Plot3 <- visreg(Euph_WP_M, "GEAR_TEMP",type = "conditional", scale = "response",
gg = TRUE, line=list(col="black"), xlab = "Gear_temp", ylab = "") +
theme_classic()
Euph_WP_Plot4 <- visreg(Euph_WP_M, "Len_bin",type = "conditional", scale = "response",
gg = TRUE, line=list(col="black"), xlab = "Len_bin", ylab = "") +
theme_classic()
Euph_WP_MainP <- (Euph_WP_Plot1 + Euph_WP_Plot2) / (Euph_WP_Plot3 + Euph_WP_Plot4) +
plot_annotation(title = "Predator: Walleye Pollock") +
ylab("label")
ggsave("pollock_eat_euph.jpg", plot = Euph_WP_MainP, device = "jpg", path = here("output/Models"))
data(worldHiresMapEnv) # source world data for plot
vis.gam(Euph_WP_M, c("RLONG", "RLAT"), plot.type = "contour", type="response",
contour.col="black", color="heat", xlab="Longitude", ylab="Latitude",
main="Euphausiacea Prescence in Pollock Stom", too.far=0.025, n.grid=250,
xlim=c(lonmin, lonmax), ylim=c(latmin, latmax))
### Plot P/A results, Pacific Halibut ###
# Set coordinate boundaries for plotting:
lonmin = -172
lonmax = -130
latmin = 52
latmax = 62
data(worldHiresMapEnv) # source world data for plot
vis.gam(Euph_WP_M, c("RLONG", "RLAT"), plot.type = "contour", type="response",
contour.col="black", color="heat", xlab="Longitude", ylab="Latitude",
main="Euphausiacea Prescence in Pollock Stom", too.far=0.025, n.grid=250,
xlim=c(lonmin, lonmax), ylim=c(latmin, latmax))
maps::map('worldHires', fill=T, xlim=c(lonmin, lonmax), ylim=c(latmin, latmax), add=T, col="lightgrey")
data(worldHiresMapEnv) # source world data for plot
?worldHiresMapEnv
??worldHiresMapEnv
require(mapdata) #for partial effects map
library(mapdata) #for partial effects map
data(worldHiresMapEnv) # source world data for plot
vis.gam(Euph_WP_M, c("RLONG", "RLAT"), plot.type = "contour", type="response",
contour.col="black", color="heat", xlab="Longitude", ylab="Latitude",
main="Euphausiacea Prescence in Pollock Stom", too.far=0.025, n.grid=250,
xlim=c(lonmin, lonmax), ylim=c(latmin, latmax))
maps::map('worldHires', fill=T, xlim=c(lonmin, lonmax), ylim=c(latmin, latmax), add=T, col="lightgrey")
vis.gam(Euph_WP_M, c("RLONG", "RLAT"), plot.type = "contour", type="response",
contour.col="black", color="heat", xlab="Longitude", ylab="Latitude",
main="Euphausiacea Prescence in Pollock Stom", too.far=0.025, n.grid=250,
xlim=c(lonmin, lonmax), ylim=c(latmin, latmax))
maps::map('worldHires', fill=T, xlim=c(lonmin, lonmax), ylim=c(latmin, latmax), add=F, col="lightgrey")
vis.gam(Euph_WP_M, c("RLONG", "RLAT"), plot.type = "contour", type="response",
contour.col="black", color="heat", xlab="Longitude", ylab="Latitude",
main="Euphausiacea Prescence in Pollock Stom", too.far=0.025, n.grid=250,
xlim=c(lonmin, lonmax), ylim=c(latmin, latmax))
maps::map('worldHires', fill=T, xlim=c(lonmin, lonmax), ylim=c(latmin, latmax), add=T, col="lightgrey")
vis.gam(Euph_WP_M, c("RLONG", "RLAT"), plot.type = "contour", type="response",
contour.col="black", color="heat", xlab="Longitude", ylab="Latitude",
main="Walleye pollock", too.far=0.025, n.grid=250,
xlim=c(lonmin, lonmax), ylim=c(latmin, latmax)) +
maps::map('worldHires', fill=T, xlim=c(lonmin, lonmax), ylim=c(latmin, latmax), add=T, col="lightgrey")
vis.gam(Euph_WP_M, c("RLONG", "RLAT"), plot.type = "contour", type="response",
contour.col="black", color="heat", xlab="Longitude", ylab="Latitude",
main="Walleye pollock", too.far=0.025, n.grid=250,
xlim=c(lonmin, lonmax), ylim=c(latmin, latmax))
maps::map('worldHires', fill=T, xlim=c(lonmin, lonmax), ylim=c(latmin, latmax), add=T, col="lightgrey")
Euph_WP_fit
View(Euph_WP_fit)
Euph_WP_M
#Comparing Delta AIC of alternative Models
Euph_WP_fit <- dredge(Euph_WP_M, beta = F, evaluate = T, rank = "AIC", trace = F)
?dredge
#Comparing Delta AIC of alternative Models
Euph_WP_fit <- dredge(Euph_WP_M, beta = "none", evaluate = T, rank = "AIC", trace = F)
#Comparing Delta AIC of alternative Models
Euph_WP_fit <- dredge(Euph_WP_M, beta = "none", evaluate = T, rank = "AIC", trace = F, extra = "GCV")
Euph_WP_M
#Comparing Delta AIC of alternative Models
Euph_WP_fit <- dredge(Euph_WP_M, beta = "none", evaluate = T, rank = "AIC", trace = F)
Euph_WP_fit <- as.data.frame(Euph_WP_fit)
Euph_WP_fit <- as.data.frame(Euph_WP_fit) %>%
mutate(response = "Euphausiids (WP)")
Euph_WP_AIC <- Euph_WP_fit %>%
mutate(response = "Euphausiids (WP)") %>%
filter(delta <=2)
View(Euph_WP_AIC)
#Comparing Delta AIC of alternative Models
Euph_WP_fit <- dredge(Euph_WP_M, beta = "none", evaluate = T, rank = "AIC", trace = F, extra = "adjR^2")
Euph_WP_fit <- as.data.frame(Euph_WP_fit) %>%
mutate(response = "Euphausiids (WP)")
#Comparing Delta AIC of alternative Models
Euph_WP_fit <- dredge(Euph_WP_M, beta = "none", evaluate = T, rank = "AIC", trace = F,
extra = c("adjR^2", "logLik"))
Euph_WP_fit <- as.data.frame(Euph_WP_fit) %>%
mutate(response = "Euphausiids (WP)")
#Comparing Delta AIC of alternative Models
Euph_WP_fit <- dredge(Euph_WP_M, beta = "none", evaluate = T, rank = "AIC", trace = F,
extra = c("adjR^2", "% Dev", "df", "logLik"))
#Comparing Delta AIC of alternative Models
Euph_WP_fit <- dredge(Euph_WP_M, beta = "none", evaluate = T, rank = "AIC", trace = F,
extra = c("adjR^2", "Dev", "df", "logLik"))
#Comparing Delta AIC of alternative Models
Euph_WP_fit <- dredge(Euph_WP_M, beta = "none", evaluate = T, rank = "AIC", trace = F,
extra = c("adjR^2", "df", "logLik"))
#Comparing Delta AIC of alternative Models
Euph_WP_fit <- dredge(Euph_WP_M, beta = "none", evaluate = T, rank = "AIC", trace = F,
extra = c("adjR^2", "deviance", "logLik"))
Euph_WP_fit <- as.data.frame(Euph_WP_fit) %>%
mutate(response = "Euphausiids (WP)")
Euph_WP_fit
deviance(Euph_WP_M)
??percent_deviance
??deviance
deviance(Euph_WP_M)/100
Euph_WP_fit <- as.data.frame(Euph_WP_fit) %>%
mutate(response = "Euphausiids (WP)")
library(rlang)
Euph_WP_fit <- as.data.frame(Euph_WP_fit) %>%
mutate(response = "Euphausiids (WP)")
detach("package:rlang", unload = TRUE)
Euph_WP_fit <- as.data.frame(Euph_WP_fit) %>%
mutate(response = "Euphausiids (WP)")
#Comparing Delta AIC of alternative Models
Euph_WP_fit <- dredge(Euph_WP_M, beta = "none", evaluate = T, rank = "AIC", trace = F,
extra = c("adjR^2", "deviance", "logLik"))
Euph_WP_AIC <- as.data.frame(Euph_WP_fit)
Euph_WP_fit <- as.data.frame(Euph_WP_fit)
Euph_WP_AIC <- Euph_WP_fit %>%
mutate(response = "Euphausiids (WP)") %>%
filter(delta <=2)
Euph_WP_AIC <- Euph_WP_fit %>%
mutate(response = "Euphausiids (WP)") %>%
filter(delta <=2)
Euph_WP_AIC <- Euph_WP_fit %>%
mutate(response = "Euphausiids (WP)") %>%
filter(delta <=2)
Euph_WP_AIC <- Euph_WP_AIC %>%
mutate(response = "Euphausiids (WP)") %>%
filter(delta <=2)
Euph_WP_AIC <- as.data.frame(Euph_WP_fit)
Euph_WP_AIC <- Euph_WP_AIC %>%
mutate(response = "Euphausiids (WP)") %>%
filter(delta <=2)
Euph_WP_f <- as.data.frame(Euph_WP_fit) %>%
mutate(response = "Euphausiids (WP)") %>%
filter(delta <=2)
#Comparing Delta AIC of alternative Models
Euph_WP_fit <- dredge(Euph_WP_M, beta = "none", evaluate = T, rank = "AIC", trace = F,
extra = c("adjR^2", "deviance", "logLik"))
Euph_WP_AIC <- as.data.frame(Euph_WP_fit) %>%
mutate(response = "Euphausiids (WP)") %>%
filter(delta <=2)
library(here) #for finding working directory
library(readr) #for loading CSV
library(writexl) #for exporting
library(tidyverse)
library(mgcv) #for running gams
library(MuMIn) #for the dredge summary table
library(patchwork) #for combining plots
library(gridExtra) #for laying out plots
library(visreg) #for visualizing partial effects
library(mapdata) #for partial effects map
options(na.action = "na.fail")
#DATA ASSEMBLY
#Load food habits data
raw_stomach_contents2021 <- read_csv(here("data/GOA_Raw_StomachContents2021.csv"))
data <- raw_stomach_contents2021
#create unique haul identifier
#?????????? I'm not sure why Cheryl created another haul identifier when there was already a HaulJoin Column?
data$Haul_Join <- paste(data$VESSEL, data$CRUISE, data$HAUL, sep = "")
#Exclude data before 1990
data <- data %>%
filter(Year >= 1990)
#Select only predators of interest
data <- data %>%
filter(Pred_common %in% c("Walleye pollock", "Pacific cod", "Pacific halibut", "Arrowtooth flounder"))
#remove empty stomachs and create unique stomach ID
data <- data %>%
filter(Prey_Name != "Empty") %>%
mutate(uniqueID = paste(HAULJOIN, PRED_NODC, PRED_SPECN), sep = "")
#Set length bins: for now I've commented this out because I need there to be predator specific length bins
#data <- data %>%
#  mutate(Len_bin = cut(PRED_LEN, breaks = c(0, 29, 39, 49, 59, 69, 1000)))
#levels(data$Len_bin) = c("<30", "30-39", "40-49", "50-59", "60-69", ">70")
#change year to factor
data$Year <- factor(data$Year)
#Check for outlier deep hauls
depth <- data %>%
distinct(Haul_Join, GEAR_DEPTH)
plot(depth$GEAR_DEPTH, depth$Haul_Join)
length(unique(depth$GEAR_DEPTH))
hist(depth$GEAR_DEPTH, breaks = 495)
boxplot(depth$GEAR_DEPTH)
summary(depth$GEAR_DEPTH)
#Remove deep hauls
data <- data %>%
filter(GEAR_DEPTH <=300)
#Remove the extreme outlying station in considerably deep water:
#Commented out because: I checked and the depth at this station was 641 which doesn't seem like an outlier
#data <- data %>%
#filter(Haul_Join != "148201101201")
# #Reformat the data so each row is an individual stomach and each prey item is a seperate binary column
# #Note: I'm not using this anymore because I wanted to incorporate haul into my model
# wide_data <- data %>%
#   mutate(pres_absent = ifelse(PREY_TWT > 0, 1, 0)) %>%
#   distinct(uniqueID, Year, Month, Day, Haul_Join, RLAT, RLONG, GEAR_DEPTH, BOTTOM_DEPTH, START_HOUR,
#            SURFACE_TEMP, GEAR_TEMP, INPFC_AREA, START_DATE, PRED_LEN, Pred_common, Prey_Name, pres_absent) %>% #This big chunk is to get rid of redundancies because sometimes there are two seperate rows for the same prey item in the same stomach (the prey species may have been a different life stage)
#   pivot_wider(names_from = Prey_Name, values_from = pres_absent, values_fill = list(pres_absent = 0)) %>%
#   rename(Walleyepollock = 'Walleye pollock')
#
# #check that the each stomach is it's own unique line
# length(unique(wide_data$uniqueID)) #this number matches the number of rows in wide_data
# #Reformat the data so each row is a predator species for each size class in each haul. The prey items of these same size class predators are consolidated and listed as binary rows for each prey item.
# #Note: I'm not using this because I wanted to create different size bins for each predator species.
# haul_wide <- data %>%
#   mutate(pres_absent = ifelse(PREY_TWT > 0, 1, 0)) %>%
#   distinct(Year, Month, Day, Haul_Join, RLAT, RLONG, GEAR_DEPTH, BOTTOM_DEPTH, START_HOUR,
#            SURFACE_TEMP, GEAR_TEMP, INPFC_AREA, START_DATE, Len_bin, Pred_common, Prey_Name, pres_absent) %>% #This big chunk is to get rid of redundancies because sometimes there are two seperate rows for the same prey item in the same stomach (the prey species may have been a different life stage)
#   group_by(Pred_common, Len_bin, Haul_Join) %>%
#   pivot_wider(names_from = Prey_Name, values_from = pres_absent, values_fill = list(pres_absent = 0)) %>%
#   rename(Walleyepollock = 'Walleye pollock')
#
# #Double checking that the number of hauls is correct
# test <- haul_wide %>%
#   group_by(Pred_common, Len_bin) %>%
#   mutate(hauls = length(unique(Haul_Join))) %>%
#   distinct(Pred_common, Len_bin, hauls)
#
# sum(test$hauls) #this matches the number of rows in the haul_wide dataframe
#Creating a function that transforms the data into wide format based on haul and predator size class.
haul_wide_fun <- function(data) {
data %>%
mutate(pres_absent = ifelse(PREY_TWT > 0, 1, 0)) %>% #create binary presence absence for each prey item
distinct(Year, Month, Day, Haul_Join, RLAT, RLONG, GEAR_DEPTH, BOTTOM_DEPTH, START_HOUR,
SURFACE_TEMP, GEAR_TEMP, INPFC_AREA, START_DATE, PRED_LEN, Len_bin, Pred_common, Prey_Name, pres_absent) %>% #remove redundancies, i.e. the same prey species listed twice for the same stomach with different life history stages
group_by(Pred_common, Len_bin, Haul_Join) %>%
distinct(Year, Month, Day, Haul_Join, RLAT, RLONG, GEAR_DEPTH, BOTTOM_DEPTH, START_HOUR,
SURFACE_TEMP, GEAR_TEMP, INPFC_AREA, START_DATE, Len_bin, Pred_common, Prey_Name, pres_absent) %>% #This is to remove redundancies again. I only want one line for each predator in the haul length bin
pivot_wider(names_from = Prey_Name, values_from = pres_absent, values_fill = list(pres_absent = 0)) %>% #create wide dataframe with a column for each prey type
rename(Walleyepollock = 'Walleye pollock') %>% #rename (this was an issue for running the walleyepollock prey model below)
na.omit() #remove missing environmental data
}
# #create day of year (Julien)
# #Note: not currently using this in my model
# wide_data <- wide_data %>%
#   mutate(date = paste(Month, Day, sep = "-"))
#
# wide_data$date <- as.Date(wide_data$date, "%m-%d")
# wide_data$julien <- format(wide_data$date, "%j")
#_________________
#Create separate dataframes for each predator species with different length bins based on sampling methods
WP <- data %>%
filter(Pred_common == "Walleye pollock") %>%
mutate(Len_bin = cut(PRED_LEN, breaks = c(0, 24, 39, 54, 1000))) %>%
haul_wide_fun()
levels(WP$Len_bin) = c("<25", "25-39", "40-54", ">54")
PH <- data %>%
filter(Pred_common == "Pacific halibut") %>%
mutate(Len_bin = cut(PRED_LEN, breaks = c(0, 31, 50, 70, 1000))) %>%
haul_wide_fun()
levels(PH$Len_bin) = c("<31", "31-50", "51-70", ">70")
#Note: I couldn't find the sampling bins for PC so I made it the same as WP
PC <- data %>%
filter(Pred_common == "Pacific cod") %>%
mutate(Len_bin = cut(PRED_LEN, breaks = c(0, 24, 39, 54, 1000))) %>%
haul_wide_fun()
levels(PC$Len_bin) = c("<25", "25-39", "40-54", ">54")
AF <- data %>%
filter(Pred_common == "Arrowtooth flounder") %>%
mutate(Len_bin = cut(PRED_LEN, breaks = c(0, 31, 50, 70, 1000))) %>%
haul_wide_fun()
levels(AF$Len_bin) = c("<31", "31-50", "51-70", ">70")
#-----
# #Sample sizes
samplesize <- matrix(NA, nrow = 4, ncol = 7)
samplesize[1,1] <- "Arrowtooth flounder"
samplesize[2,1] <- "Pacific halibut"
samplesize[3,1] <- "Pacific cod"
samplesize[4,1] <- "Walleye pollock"
colnames(samplesize) <- c("Predator name", "Total stomachs sampled", "Euphausiacea", "Walleyepollock", "Ammodytidae", "Clupeoidei", "Osmeridae")
pred_list <- list(AF, PH, PC, WP)
prey_list <- c("Euphausiacea", "Walleyepollock", "Ammodytidae", "Clupeoidei", "Osmeridae")
for(i in 1:length(pred_list)) {
for(j in 1:length(prey_list)) {
samplesize[i, 2] <- nrow(pred_list[[i]]) #total stomachs
samplesize[i, 3] <- sum(pred_list[[i]]$Euphausiacea)
samplesize[i, 4]<- sum(pred_list[[i]]$Walleyepollock)
samplesize[i, 5]<- sum(pred_list[[i]]$Ammodytidae)
samplesize[i, 6]<- sum(pred_list[[i]]$Clupeoidei)
samplesize[i, 7]<- sum(pred_list[[i]]$Osmerid)
}
}
samplesize <- as.data.frame(samplesize)
write.csv(samplesize, here("output/summary_tables/samplesizemodels.csv"), row.names = F)
#-------------------------------
#######################################
#-------------------------------------
#I use na.omit() to remove any rows that are missing environmental data (gear temp/depth)
#
# WP <- haul_wide %>%
#   filter(Pred_common == "Walleye pollock") %>%
#   na.omit()
#
# PH <- haul_wide %>%
#   filter(Pred_common == "Pacific halibut") %>%
#   na.omit()
#
# PC <- haul_wide %>%
#   filter(Pred_common == "Pacific cod") %>%
#   na.omit()
#
# AF <- haul_wide %>%
#   filter(Pred_common == "Arrowtooth flounder") %>%
#   na.omit()
#-------------------------------
#PREY:  EUPHAUSIACEA
#PRED: Walleye Pollock
#Full Model
Euph_WP_M <- gam(Euphausiacea ~ Year + s(RLONG, RLAT) + s(GEAR_DEPTH)+ s(GEAR_TEMP, k = 4) + Len_bin,
data = WP,
family = binomial(link = logit), #logistic scale
method = "GCV.Cp")
summary(Euph_WP_M)
#Comparing Delta AIC of alternative Models
Euph_WP_fit <- dredge(Euph_WP_M, beta = "none", evaluate = T, rank = "AIC", trace = F,
extra = c("adjR^2", "deviance", "logLik"))
Euph_WP_AIC <- as.data.frame(Euph_WP_fit) %>%
mutate(response = "Euphausiids (WP)") %>%
filter(delta <=2)
Euph_WP_AIC <- as.data.frame(Euph_WP_fit)
Euph_WP_AIC <- Euph_WP_AIC %>%
mutate(response = "Euphausiids (WP)") %>%
filter(delta <=2)
View(Euph_WP_AIC)
Euph_WP_AIC <- Euph_WP_AIC %>%
filter(delta <=2)
rlang::last_error()
class(Euph_WP_AIC)

xlim=c(lonmin, lonmax), ylim=c(latmin, latmax))
maps::map('worldHires', fill=T, xlim=c(lonmin, lonmax), ylim=c(latmin, latmax), add=T, col="lightgrey")
#Full Model
Her_AF_M <- gam(Clupeoidei ~ Year + s(RLONG, RLAT) + s(GEAR_DEPTH)+ s(GEAR_TEMP, k = 4) + Len_bin,
data = AF,
family = binomial(link = logit),
method = "GCV.Cp")
summary(Her_AF_M)
#Comparing Delta AIC of alternative Models
Her_AF_fit <- dredge(Her_AF_M, beta = F, evaluate = T, rank = "AIC", trace = F)
Her_AF_fit <- as.data.frame(Her_AF_fit)
write.csv(Her_AF_fit, here("output/Models/AFlounder_eat_Her_AIC.csv"), row.names = F)
# Residudal diagnostics
par(mfrow=c(2,2))
gam.check(Her_AF_M)
#Plotting partial effects
Her_AF_Plot1 <- visreg(Her_AF_M, "Year",type = "conditional", scale = "response",
gg = TRUE, line=list(col="black"), xlab = "Year", ylab = "Partial Effect on Herring P/A") +
theme_classic() +
theme(axis.text.x = element_text(angle = -45))
Her_AF_Plot2 <- visreg(Her_AF_M, "GEAR_DEPTH",type = "conditional", scale = "response",
gg = TRUE, line=list(col="black"), xlab = "Gear_Depth", ylab = "") +
theme_classic()
Her_AF_Plot3 <- visreg(Her_AF_M, "GEAR_TEMP",type = "conditional", scale = "response",
gg = TRUE, line=list(col="black"), xlab = "Gear_temp", ylab = "") +
theme_classic()
Her_AF_Plot4 <- visreg(Her_AF_M, "Len_bin",type = "conditional", scale = "response",
gg = TRUE, line=list(col="black"), xlab = "Len_bin", ylab = "") +
theme_classic()
Her_AF_MainP <- (Her_AF_Plot1 + Her_AF_Plot2) / (Her_AF_Plot3 + Her_AF_Plot4) +
plot_annotation(title = "Predator: Arrowtooth Flounder")
Her_AF_MainP
vis.gam(Her_AF_M, c("RLONG", "RLAT"), plot.type = "contour", type="response",
contour.col="black", color="heat", xlab="Longitude", ylab="Latitude",
main="Herring Prescence in AFlounder Stom", too.far=0.025, n.grid=250,
xlim=c(lonmin, lonmax), ylim=c(latmin, latmax))
maps::map('worldHires', fill=T, xlim=c(lonmin, lonmax), ylim=c(latmin, latmax), add=T, col="lightgrey")
#-----------------
#PRED: Pacific halibut
#Full Model
Her_PH_M <- gam(Clupeoidei ~ Year + s(RLONG, RLAT) + s(GEAR_DEPTH)+ s(GEAR_TEMP, k = 4) + Len_bin,
data = PH,
family = binomial(link = logit),
method = "GCV.Cp")
summary(Her_PH_M)
#Comparing Delta AIC of alternative Models
Her_PH_fit <- dredge(Her_PH_M, beta = F, evaluate = T, rank = "AIC", trace = F)
Her_PH_fit <- as.data.frame(Her_PH_fit)
write.csv(Her_PH_fit, here("output/Models/Halibut_eat_Her_AIC.csv"), row.names = F)
# Residudal diagnostics
par(mfrow=c(2,2))
gam.check(Her_PH_M)
t
#Plotting partial effects
Her_PH_Plot1 <- visreg(Her_PH_M, "Year",type = "conditional", scale = "response",
gg = TRUE, line=list(col="black"), xlab = "Year", ylab = "Partial Effect on Herring P/A") +
theme_classic() +
theme(axis.text.x = element_text(angle = -45))
Her_PH_Plot2 <- visreg(Her_PH_M, "GEAR_DEPTH",type = "conditional", scale = "response",
gg = TRUE, line=list(col="black"), xlab = "Gear_Depth", ylab = "") +
theme_classic()
Her_PH_Plot3 <- visreg(Her_PH_M, "GEAR_TEMP",type = "conditional", scale = "response",
gg = TRUE, line=list(col="black"), xlab = "Gear_temp", ylab = "") +
theme_classic()
Her_PH_Plot4 <- visreg(Her_PH_M, "Len_bin",type = "conditional", scale = "response",
gg = TRUE, line=list(col="black"), xlab = "Len_bin", ylab = "") +
theme_classic()
Her_PH_MainP <- (Her_PH_Plot1 + Her_PH_Plot2) / (Her_PH_Plot3 + Her_PH_Plot4) +
plot_annotation(title = "Predator: Pacific Halibut")
Her_PH_MainP
vis.gam(Her_PH_M, c("RLONG", "RLAT"), plot.type = "contour", type="response",
contour.col="black", color="heat", xlab="Longitude", ylab="Latitude",
main="Herring Prescence in Halibut Stom", too.far=0.025, n.grid=250,
xlim=c(lonmin, lonmax), ylim=c(latmin, latmax))
maps::map('worldHires', fill=T, xlim=c(lonmin, lonmax), ylim=c(latmin, latmax), add=T, col="lightgrey")
#Full Model
Cap_AF_M <- gam(Osmerid ~ Year + s(RLONG, RLAT) + s(GEAR_DEPTH)+ s(GEAR_TEMP, k = 4) + Len_bin,
data = AF,
family = binomial(link = logit),
method = "GCV.Cp")
summary(Cap_AF_M)
#Comparing Delta AIC of alternative Models
Cap_AF_fit <- dredge(Cap_AF_M, beta = F, evaluate = T, rank = "AIC", trace = F)
Cap_AF_fit <- as.data.frame(Cap_AF_fit)
write.csv(Cap_AF_fit, here("output/Models/AFlounder_eat_Cap_AIC.csv"), row.names = F)
# Residudal diagnostics
par(mfrow=c(2,2))
gam.check(Cap_AF_M)
#Plotting partial effects
Cap_AF_Plot1 <- visreg(Cap_AF_M, "Year",type = "conditional", scale = "response",
gg = TRUE, line=list(col="black"), xlab = "Year", ylab = "Partial Effect on Capelin P/A") +
theme_classic() +
theme(axis.text.x = element_text(angle = -45))
Cap_AF_Plot2 <- visreg(Her_AF_M, "GEAR_DEPTH",type = "conditional", scale = "response",
gg = TRUE, line=list(col="black"), xlab = "Gear_Depth", ylab = "") +
theme_classic()
Cap_AF_Plot3 <- visreg(Her_AF_M, "GEAR_TEMP",type = "conditional", scale = "response",
gg = TRUE, line=list(col="black"), xlab = "Gear_temp", ylab = "") +
theme_classic()
Cap_AF_Plot4 <- visreg(Her_AF_M, "Len_bin",type = "conditional", scale = "response",
gg = TRUE, line=list(col="black"), xlab = "Len_bin", ylab = "") +
theme_classic()
Cap_AF_MainP <- (Cap_AF_Plot1 + Cap_AF_Plot2) / (Cap_AF_Plot3 + Cap_AF_Plot4) +
plot_annotation(title = "Predator: Arrowtooth Flounder")
Cap_AF_MainP
vis.gam(Cap_AF_M, c("RLONG", "RLAT"), plot.type = "contour", type="response",
contour.col="black", color="heat", xlab="Longitude", ylab="Latitude",
main="Capelin Prescence in AFlounder Stom", too.far=0.025, n.grid=250,
xlim=c(lonmin, lonmax), ylim=c(latmin, latmax))
maps::map('worldHires', fill=T, xlim=c(lonmin, lonmax), ylim=c(latmin, latmax), add=T, col="lightgrey")
#-----------------
#PRED: Pacific halibut
#Full Model
Cap_PH_M <- gam(Osmerid ~ Year + s(RLONG, RLAT) + s(GEAR_DEPTH)+ s(GEAR_TEMP, k = 4) + Len_bin,
data = PH,
family = binomial(link = logit),
method = "GCV.Cp")
summary(Cap_PH_M)
#Comparing Delta AIC of alternative Models
Cap_PH_fit <- dredge(Cap_PH_M, beta = F, evaluate = T, rank = "AIC", trace = F)
Cap_PH_fit <- as.data.frame(Cap_PH_fit)
write.csv(Cap_PH_fit, here("output/Models/Halibut_eat_Cap_AIC.csv"), row.names = F)
# Residudal diagnostics
par(mfrow=c(2,2))
gam.check(Cap_PH_M)
#Plotting partial effects
Cap_PH_Plot1 <- visreg(Cap_PH_M, "Year",type = "conditional", scale = "response",
gg = TRUE, line=list(col="black"), xlab = "Year", ylab = "Partial Effect on Capelin P/A") +
theme_classic() +
theme(axis.text.x = element_text(angle = -45))
Cap_PH_Plot1
Cap_PH_Plot2 <- visreg(Cap_PH_M, "GEAR_DEPTH",type = "conditional", scale = "response",
gg = TRUE, line=list(col="black"), xlab = "Gear_Depth", ylab = "") +
theme_classic()
Cap_PH_Plot3 <- visreg(Cap_PH_M, "GEAR_TEMP",type = "conditional", scale = "response",
gg = TRUE, line=list(col="black"), xlab = "Gear_temp", ylab = "") +
theme_classic()
Cap_PH_Plot4 <- visreg(Cap_PH_M, "Len_bin",type = "conditional", scale = "response",
gg = TRUE, line=list(col="black"), xlab = "Len_bin", ylab = "") +
theme_classic()
Cap_PH_MainP <- (Cap_PH_Plot1 + Cap_PH_Plot2) / (Cap_PH_Plot3 + Cap_PH_Plot4) +
plot_annotation(title = "Predator: Pacific Halibut")
Cap_PH_MainP
vis.gam(Cap_PH_M, c("RLONG", "RLAT"), plot.type = "contour", type="response",
contour.col="black", color="heat", xlab="Longitude", ylab="Latitude",
main="Capelin Prescence in Halibut Stom", too.far=0.025, n.grid=250,
xlim=c(lonmin, lonmax), ylim=c(latmin, latmax))
maps::map('worldHires', fill=T, xlim=c(lonmin, lonmax), ylim=c(latmin, latmax), add=T, col="lightgrey")
#-------------
#PRED: Pacific cod
#Full Model
Cap_PC_M <- gam(Osmerid ~ Year + s(RLONG, RLAT) + s(GEAR_DEPTH)+ s(GEAR_TEMP, k = 4) + Len_bin,
data = PC,
family = binomial(link = logit),
method = "GCV.Cp")
summary(Cap_PC_M)
#Comparing Delta AIC of alternative Models
Cap_PC_fit <- dredge(Cap_PC_M, beta = F, evaluate = T, rank = "AIC", trace = F)
Cap_PC_fit <- as.data.frame(Cap_PC_fit)
write.csv(Cap_PC_fit, here("output/Models/Cod_eat_Cap_AIC.csv"), row.names = F)
# Residudal diagnostics
par(mfrow=c(2,2))
gam.check(Cap_PC_M)
#Plotting partial effects
Cap_PC_Plot1 <- visreg(Cap_PC_M, "Year",type = "conditional", scale = "response",
gg = TRUE, line=list(col="black"), xlab = "Year", ylab = "Partial Effect on Capelin P/A") +
theme_classic() +
theme(axis.text.x = element_text(angle = -45))
Cap_PC_Plot2 <- visreg(Cap_PC_M, "GEAR_DEPTH",type = "conditional", scale = "response",
gg = TRUE, line=list(col="black"), xlab = "Gear_Depth", ylab = "") +
theme_classic()
Cap_PC_Plot3 <- visreg(Cap_PC_M, "GEAR_TEMP",type = "conditional", scale = "response",
gg = TRUE, line=list(col="black"), xlab = "Gear_temp", ylab = "") +
theme_classic()
Cap_PC_Plot4 <- visreg(Cap_PC_M, "Len_bin",type = "conditional", scale = "response",
gg = TRUE, line=list(col="black"), xlab = "Len_bin", ylab = "") +
theme_classic()
Cap_PC_MainP <- (Cap_PC_Plot1 + Cap_PC_Plot2) / (Cap_PC_Plot3 + Cap_PC_Plot4) +
plot_annotation(title = "Predator: Pacific Cod")
Cap_PC_MainP
vis.gam(Cap_PC_M, c("RLONG", "RLAT"), plot.type = "contour", type="response",
contour.col="black", color="heat", xlab="Longitude", ylab="Latitude",
main="Capelin Prescence in Cod Stom", too.far=0.025, n.grid=250,
xlim=c(lonmin, lonmax), ylim=c(latmin, latmax))
maps::map('worldHires', fill=T, xlim=c(lonmin, lonmax), ylim=c(latmin, latmax), add=T, col="lightgrey")
#-------------
#PRED: Walleye Pollock
#Full Model
Cap_WP_M <- gam(Osmerid ~ Year + s(RLONG, RLAT) + s(GEAR_DEPTH)+ s(GEAR_TEMP, k = 4) + Len_bin,
data = WP,
family = binomial(link = logit),
method = "GCV.Cp")
summary(Cap_WP_M)
#Comparing Delta AIC of alternative Models
Cap_WP_fit <- dredge(Cap_WP_M, beta = F, evaluate = T, rank = "AIC", trace = F)
Cap_WP_fit <- as.data.frame(Cap_WP_fit)
write.csv(Cap_WP_fit, here("output/Models/Cod_eat_WP_AIC.csv"), row.names = F)
# Residudal diagnostics
par(mfrow=c(2,2))
gam.check(Cap_WP_M)
#Plotting partial effects
Cap_WP_Plot1 <- visreg(Cap_WP_M, "Year",type = "conditional", scale = "response",
gg = TRUE, line=list(col="black"), xlab = "Year", ylab = "Partial Effect on Capelin P/A") +
theme_classic() +
theme(axis.text.x = element_text(angle = -45))
Cap_WP_Plot2 <- visreg(Cap_WP_M, "GEAR_DEPTH",type = "conditional", scale = "response",
gg = TRUE, line=list(col="black"), xlab = "Gear_Depth", ylab = "") +
theme_classic()
Cap_WP_Plot3 <- visreg(Cap_WP_M, "GEAR_TEMP",type = "conditional", scale = "response",
gg = TRUE, line=list(col="black"), xlab = "Gear_temp", ylab = "") +
theme_classic()
Cap_WP_Plot4 <- visreg(Cap_WP_M, "Len_bin",type = "conditional", scale = "response",
gg = TRUE, line=list(col="black"), xlab = "Len_bin", ylab = "") +
theme_classic()
Cap_WP_MainP <- (Cap_WP_Plot1 + Cap_WP_Plot2) / (Cap_WP_Plot3 + Cap_WP_Plot4) +
plot_annotation(title = "Predator: Pacific Cod")
Cap_WP_MainP
vis.gam(Cap_WP_M, c("RLONG", "RLAT"), plot.type = "contour", type="response",
contour.col="black", color="heat", xlab="Longitude", ylab="Latitude",
main="Capelin Prescence in WP Stom", too.far=0.025, n.grid=250,
xlim=c(lonmin, lonmax), ylim=c(latmin, latmax))
maps::map('worldHires', fill=T, xlim=c(lonmin, lonmax), ylim=c(latmin, latmax), add=T, col="lightgrey")
Euph_WP_fit
#Comparing Delta AIC of alternative Models
Euph_WP_fit <- dredge(Euph_WP_M, beta = F, evaluate = T, rank = "AIC", trace = F)
Euph_PC_fit <- as.data.frame(Euph_PC_fit)
#Comparing Delta AIC of alternative Models
Euph_AF_fit <- dredge(Euph_AF_M, beta = F, evaluate = T, rank = "AIC", trace = F)
#Comparing Delta AIC of alternative Models
WP_AF_fit <- dredge(WP_AF_M, beta = F, evaluate = T, rank = "AIC", trace = F)
#Comparing Delta AIC of alternative Models
WP_PC_fit <- dredge(WP_PC_M, beta = F, evaluate = T, rank = "AIC", trace = F)
#Comparing Delta AIC of alternative Models
WP_PH_fit <- dredge(WP_PH_M, beta = F, evaluate = T, rank = "AIC", trace = F)
#Comparing Delta AIC of alternative Models
SL_AF_fit <- dredge(SL_AF_M, beta = F, evaluate = T, rank = "AIC", trace = F)
#Comparing Delta AIC of alternative Models
SL_PC_fit <- dredge(SL_PC_M, beta = F, evaluate = T, rank = "AIC", trace = F)
#Comparing Delta AIC of alternative Models
SL_PH_fit <- dredge(SL_PH_M, beta = F, evaluate = T, rank = "AIC", trace = F)
#Comparing Delta AIC of alternative Models
Her_AF_fit <- dredge(Her_AF_M, beta = F, evaluate = T, rank = "AIC", trace = F)
#Comparing Delta AIC of alternative Models
Her_PH_fit <- dredge(Her_PH_M, beta = F, evaluate = T, rank = "AIC", trace = F)
#Comparing Delta AIC of alternative Models
Cap_AF_fit <- dredge(Cap_AF_M, beta = F, evaluate = T, rank = "AIC", trace = F)
#Comparing Delta AIC of alternative Models
Cap_PH_fit <- dredge(Cap_PH_M, beta = F, evaluate = T, rank = "AIC", trace = F)
#Comparing Delta AIC of alternative Models
Cap_PC_fit <- dredge(Cap_PC_M, beta = F, evaluate = T, rank = "AIC", trace = F)
Euph_WP_fit
Euph_PC_fit
View(Euph_PC_fit)
Euph_AF_fit
WP_AF_fit
WP_PC_fit
WP_PH_fit
SL_AF_fit
SL_PC_fit
SL_PH_fit
Her_AF_fit
Her_PH_fit
Cap_AF_fit
Cap_PH_fit
Cap_PC_fit
view(Cap_PC_fit)
view(Cap_WP_fit)
#Load Libraries
library(shiny)
#create blank user interface (UI)
ui <- fluidPage()
server <- function(input, output, session) {
}
shinyApp(ui = ui, server = server)
#Create Shiny App
#create blank user interface (UI)
ui <- fluidPage(
titlePanel("Gulf of Alaska Groundfish Food Web")
)
server <- function(input, output, session) {
}
shinyApp(ui = ui, server = server)
ggplot()
library(tidyverse)
server <- function(input, output, session) {
output$network <- renderPlot({
ggplot()
})
}
shinyApp(ui = ui, server = server)
#Create Shiny App
#create blank user interface (UI)
ui <- fluidPage(
titlePanel("Gulf of Alaska Groundfish Food Web"),
plotOutput('network')
)
server <- function(input, output, session) {
output$network <- renderPlot({
ggplot()
})
}
shinyApp(ui = ui, server = server)
#Create Shiny App
#create blank user interface (UI)
ui <- fluidPage(
titlePanel("Gulf of Alaska Groundfish Food Web"),
plotOutput('trend')
)
server <- function(input, output, session) {
output$trend <- renderPlot({
ggplot()
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
output$trend <- renderPlot({
ggplot()
})
}
shinyApp(ui = ui, server = server)
#Create Shiny App
#create blank user interface (UI)
ui <- fluidPage(
titlePanel("Gulf of Alaska Groundfish Food Web"),
plotOutput(trend)
)
#Create Shiny App
#create blank user interface (UI)
ui <- fluidPage(
titlePanel("Gulf of Alaska Groundfish Food Web"),
plotOutput()
)
#Create Shiny App
#create blank user interface (UI)
ui <- fluidPage(
titlePanel("Gulf of Alaska Groundfish Food Web"),
plotOutput('trend')
)
server <- function(input, output, session) {
output$trend <- renderPlot({
ggplot()
})
}
shinyApp(ui = ui, server = server)
raw_stomach_contents2021 <- read_csv(here("data/GOA_Raw_StomachContents2021.csv"))
library(shiny)
library(tidyverse)
library(readr)
library(tidyverse)
library(here)
library(patchwork)
library(igraph)
library(ggraph)
#Load data
raw_stomach_contents2021 <- read_csv(here("data/GOA_Raw_StomachContents2021.csv"))
network_sc_filtered <- read_csv(here("output/source_data/network_sc_filtered.csv"))
groupings <- read_csv(here("output/groupings.csv"))
network_sc_filtered <- left_join(network_sc_filtered,groupings,by="Prey_Name")
network_simple <- network_sc_filtered %>%
filter(Prey_Name_Networks != "Empty") %>%
select(Pred_common, uniqueID, Prey_Name_Networks, Year, INPFC_AREA)
#pred_names <- unique(network_sc_filtered$Pred_common)
#prey_names <- unique(network_sc_filtered$Prey_Name)
#Write a function to calculate Percent Occurrence
Occur_fun <- function(data) {
data <- data %>%
group_by(Pred_common, Year, INPFC_AREA) %>%
mutate(TotalPredN = length(unique(uniqueID))) %>%
group_by(Pred_common, Prey_Name_Networks, Year, INPFC_AREA) %>%
mutate(NStomachs = length(unique(uniqueID)),
Percent_Occur = NStomachs/TotalPredN*100) %>%
distinct(Pred_common, Prey_Name_Networks, Year, INPFC_AREA, TotalPredN, NStomachs, Percent_Occur)
return(data)
}
#Create a dataframe with all the info on percent occurrence that I need for the networks
network_occurance <- network_simple %>%
Occur_fun()
#Plot the number of predators sampled vs the number of unique prey observed
network_occurance <- network_occurance %>%
group_by(Pred_common, Year, INPFC_AREA) %>%
mutate(unique_prey = sum(ifelse(NStomachs >= 1, 1, 0)))
ggplot(network_occurance, aes(x = TotalPredN, y = unique_prey, color = Pred_common)) +
geom_point() +
geom_smooth(method = "loess") +
ylab("number of unique prey items") +
xlab("number of stomachs sampled") +
theme_classic()
#Get the dataframes into edge list and node list format
edges.df <- network_occurance %>%
select(Pred_common, Prey_Name_Networks, Percent_Occur, NStomachs, Year, INPFC_AREA) %>%
rename(from = Pred_common, to = Prey_Name_Networks, weight = Percent_Occur, n = NStomachs)
nodes.df.1 <- network_occurance %>%
ungroup() %>%
select(Prey_Name_Networks, Year, INPFC_AREA) %>%
distinct(Prey_Name_Networks, Year, INPFC_AREA) %>%
mutate(n = NA) %>%
rename(name = Prey_Name_Networks)
nodes.df.2 <- network_occurance %>%
ungroup() %>%
select(Pred_common, Year, INPFC_AREA, TotalPredN) %>%
distinct(Pred_common, Year, INPFC_AREA, TotalPredN) %>%
rename(name = Pred_common, n = TotalPredN)
#I lost the number of predators sampled because I can't have repetative nodes. I think this is ok because
#I have the table that shows the predator sample sizes for each region and year
nodes.df <- rbind(nodes.df.1, nodes.df.2) %>%
distinct(name, Year, INPFC_AREA)
#-------------------------------
#Now that everything is in the correct format I need to build networks.
#I think in order to do this I will have to build loops (god help me).
#practice
edges.df.test <- edges.df %>%
filter(Year == 1990 & INPFC_AREA == 610) %>%
ungroup() %>%
select(from, to)
nodes.df.test <- nodes.df %>%
filter(Year == 1990 & INPFC_AREA == 610) %>%
select(name)
g <- graph_from_data_frame(d = edges.df.test, vertices = nodes.df.test, directed = T)
plot(g,
vertex.label.color = "black",
edge.color = 'gray77',
vertex.size = 0,
edge.arrow.size = 0.1,
layout = layout_nicely(g))
library(threejs) #interactive network package
install.packages("threejs")
library(threejs) #interactive network package
#Create interactive network
graphjs(g)
g <-set_vertex_attr(g,
"label",
value = V(g)$name)
#Create interactive network
graphjs(g)
#Color
x = edge.betweenness.community(g)
i <- membership(x)
i
g<-set_vertex_attr(g,
"color")
g<-set_vertex_attr(g,
"color",
value = [i])
g<-set_vertex_attr(g,
"color",
value = i)
#Create interactive network
graphjs(g)
server <- function(input, output, session) {
output$trend <- renderPlot({
g
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Gulf of Alaska Groundfish Food Web"),
plotOutput('trend')
)
#create function for server
server <- function(input, output, session) {
output$trend <- renderPlot({
ggplot()
})
}
shinyApp(ui = ui, server = server)
install.packages("networkD3")
library(networkD3) #another interactive network package more compatable with shiny?
g2 <- igraph_to_networkD3(g)
forceNetwork(g2)
forceNetwork(Links = g2$links, Nodes = g2$nodes)
forceNetwork(Links = g2$links, Nodes = g2$nodes, NodeID = 'name')
forceNetwork(Links = g2$links, Nodes = g2$nodes, NodeID = 'name', Group = 'i')
forceNetwork(Links = g2$links, Nodes = g2$nodes, NodeID = 'name', Group = i)
forceNetwork(Links = g2$links, Nodes = g2$nodes, NodeID = 'name', Group = 'group')
forceNetwork(Links = g2$links, Nodes = g2$nodes, NodeID = 'name', Group = none)
forceNetwork(Links = g2$links, Nodes = g2$nodes, NodeID = 'name', Group = NA)
forceNetwork(Links = g2$links, Nodes = g2$nodes, NodeID = 'name')
g2 <- igraph_to_networkD3(g, group = i)
forceNetwork(Links = g2$links, Nodes = g2$nodes, NodeID = 'name', group = 'group')
forceNetwork(Links = g2$links, Nodes = g2$nodes, NodeID = 'name', Group = 'group')
forceNetwork(Links = g2$links, Nodes = g2$nodes, NodeID = 'name', Group = 'group', zoom = T)
server <- function(input, output, session) {
output$trend <- renderForceNetwork({
forceNetwork(Links = g2$links, Nodes = g2$nodes, NodeID = 'name', Group = 'group', zoom = T)
})
}
shinyApp(ui = ui, server = server)
#Create Shiny App
#create blank user interface (UI)
ui <- fluidPage(
titlePanel("Gulf of Alaska Groundfish Food Web"),
forceNetworkOutput('trend')
)
shinyApp(ui = ui, server = server)
shiny::runGitHub('christophergandrud/networkD3-shiny-example')
fn$x$nodes$hyperlink <- paste0(
'https://en.wikipedia.org/wiki/Cat',
g2$name
)
fn <- forceNetwork(Links = g2$links, Nodes = g2$nodes, NodeID = 'name', Group = 'group', zoom = T)
fn$x$nodes$hyperlink <- paste0(
'https://en.wikipedia.org/wiki/Cat',
g2$name
)
fn$x$options$clickAction = 'window.open(d.hyperlink)'
fn
server <- function(input, output, session) {
output$trend <- renderForceNetwork({
fn
})
}
shinyApp(ui = ui, server = server)

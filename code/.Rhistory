}
network1 <- year.list[[1]]
plot(network1,
vertex.size = 0,
edge.arrow.size = 0.1,
layout = layout_nicely(network1))
test <- as.data.frame(strength(network1,
vids = V(network1),
mode = c("in"),
loops = T))
netstats.list <- vector('list', 45)
for(i in length(year.list)) {
netstats.list[i] <- as.data.frame(strength(year.list[i],
vids = V(year.list[i]),
mode = c("in"),
loops = T))
}
netstats.list[i] <- as.data.frame(strength(year.list[[i]],
vids = V(year.list[[i]]),
mode = c("in"),
loops = T))
netstats.list[1]
for(i in 1:length(year.list)) {
netstats.list[i] <- as.data.frame(strength(year.list[[i]],
vids = V(year.list[[i]]),
mode = c("in"),
loops = T))
}
netstats.list[1]
netstats.list[2]
view(netstats.list[1])
netstats.list[i] <- as.data.frame(strength(year.list[i],
vids = V(year.list[i]),
mode = c("in"),
loops = T))
network2 <- year.list[[2]]
plot(network2,
vertex.size = 0,
edge.arrow.size = 0.1,
layout = layout_nicely(network1))
plot(network2,
vertex.size = 0,
edge.arrow.size = 0.1,
layout = layout_nicely(network1))
plot(network2,
vertex.size = 0,
edge.arrow.size = 0.1,
layout = layout_nicely(network2))
plot(network2,
vertex.size = 0,
edge.arrow.size = 0.1,
layout = layout_nicely())
plot(network1,
vertex.size = 0,
edge.arrow.size = 0.1,
layout = layout_nicely(network1))
network40 <- year.list[[40]]
plot(network40,
vertex.size = 0,
edge.arrow.size = 0.1,
layout = layout_nicely(network40))
library(here) #for finding working directory
library(readr) #for loading CSV
raw_stomach_contents2021 <- read_csv(here("data/GOA_Raw_StomachContents2021.csv"))
# source(SpatialAnalyses.R)
################################################################
### INITIAL DATA PREPARATION ###
################################################################
# Read in and format food habits data:
preyWT = get(load("Data/preyWTGOA_2013.Rdata"))
# source(SpatialAnalyses.R)
################################################################
### INITIAL DATA PREPARATION ###
################################################################
# Read in and format food habits data:
preyWT = get(load("ResourcePartitioning_Burch/Data/preyWTGOA_2013.Rdata"))
# source(SpatialAnalyses.R)
################################################################
### INITIAL DATA PREPARATION ###
################################################################
# Read in and format food habits data:
preyWT = get(load(here("ResourcePartitioning_Burch/Data/preyWTGOA_2013.Rdata")))
View(raw_stomach_contents2021)
View(raw_stomach_contents2021)
View(preyWT)
data <- raw_stomach_contents2021
#create unique haul identifier
#?????????? I'm not sure why she created another haul identifier when there was already a HaulJoin Column?
data$Haul_Join <- paste(data$VESSEL, data$CRUISE, data$HAUL, sep = "")
View(data)
# Create unique haul identifier by concatenating VESSEL, CRUISE, and HAUL (allows for joining to trawl survey data below):
preyWT$Haul_Join = paste(preyWT$Vessel, preyWT$Cruise, preyWT$Haul, sep="")
# Manually assign International North Pacific Fisheries Commissionstatistical areas (i.e., values) based on survey strata (i.e., index). Note: The second number from the right corresponds with individual statistical areas (e.g., STRATUM 120 = StatArea 620, STRATUM 251 = StatArea 650).
index = unique(preyWT$Strata)
values = c("610", "610", "610", "610", "630", "630", "630", "630", "630", "630", "640", "640", "640", "620", "620", "620",
"610", "610", "610", "610", "610", "620", "620", "620", "620", "630", "640", "640", "640", "640", "640", "640",
"650", "650", "650", "650", "650", "620", "630", "630", "630", "640", "630", "630", "630", "630", "620", "630",
"620", "630", "650", "650", "610", "640", "620")
preyWT$StatArea = values[match(preyWT$Strata, index)]
table(preyWT$Strata, preyWT$StatArea) # Check
#Next she manually assigned INPFC areas to strata areas, but I don't think I have to do this because there already is a INPFC column in my data
index <- data %>% filter(unique(STRATUM))
library(tidyverse)
#Next she manually assigned INPFC areas to strata areas, but I don't think I have to do this because there already is a INPFC column in my data
index <- data %>% filter(unique(STRATUM))
#Next she manually assigned INPFC areas to strata areas, but I don't think I have to do this because there already is a INPFC column in my data
index <- data %>% distinct(STRATUM)
#Next she manually assigned INPFC areas to strata areas, but I don't think I have to do this because there already is a INPFC column in my data
index <- data %>% distinct(STRATUM, INPFC_AREA)
View(index)
view(table(preyWT$Strata, preyWT$StatArea)) # Check
table(preyWT$Strata, preyWT$StatArea)
#Next she manually assigned INPFC areas to strata areas, but I don't think I have to do this because there already is a INPFC column in my data
strata <- data %>% distinct(STRATUM, INPFC_AREA)
View(strata)
# Manually assign International North Pacific Fisheries Commissionstatistical areas (i.e., values) based on survey strata (i.e., index). Note: The second number from the right corresponds with individual statistical areas (e.g., STRATUM 120 = StatArea 620, STRATUM 251 = StatArea 650).
index = unique(preyWT$Strata)
values = c("610", "610", "610", "610", "630", "630", "630", "630", "630", "630", "640", "640", "640", "620", "620", "620",
"610", "610", "610", "610", "610", "620", "620", "620", "620", "630", "640", "640", "640", "640", "640", "640",
"650", "650", "650", "650", "650", "620", "630", "630", "630", "640", "630", "630", "630", "630", "620", "630",
"620", "630", "650", "650", "610", "640", "620")
preyWT$StatArea = values[match(preyWT$Strata, index)]
view(table(preyWT$Strata, preyWT$StatArea)) # Check
#Exclude data before 1990
data <- data %>%
filter(Year < 1990)
#Select only predators of interest
data <- data %>%
filter(Pred_common %in% c("Walleye pollock", "Pacific cod", "Pacific halibut", "Arrowtooth flounder"))
#remove empty stomachs
data <- data %>%
filter(Prey_Name != "Empty")
#set 10cm fork length bins
data <- data %>%
mutate(Len_bin = cut(PRED_LEN, breaks = c(0, 29, 39, 49, 59, 69, 1000)))
levels(data$Len_bin) = c("<30", "30-39", "40-49", "60-69", ">70")
# Set 10 cm fork length bins (30-39, 40-49, 50-59, 60-69):
preyWT_red$FLBin = cut(preyWT_red$PredL, breaks = c(0, 29, 39, 49, 59, 69, 171))
# Manually assign International North Pacific Fisheries Commissionstatistical areas (i.e., values) based on survey strata (i.e., index). Note: The second number from the right corresponds with individual statistical areas (e.g., STRATUM 120 = StatArea 620, STRATUM 251 = StatArea 650).
index = unique(preyWT$Strata)
values = c("610", "610", "610", "610", "630", "630", "630", "630", "630", "630", "640", "640", "640", "620", "620", "620",
"610", "610", "610", "610", "610", "620", "620", "620", "620", "630", "640", "640", "640", "640", "640", "640",
"650", "650", "650", "650", "650", "620", "630", "630", "630", "640", "630", "630", "630", "630", "620", "630",
"620", "630", "650", "650", "610", "640", "620")
preyWT$StatArea = values[match(preyWT$Strata, index)]
view(table(preyWT$Strata, preyWT$StatArea)) # Check
# Rename INPFC statistical areas:
preyWT$StatArea = as.factor(preyWT$StatArea)
levels(preyWT$StatArea) = c("Shumagin", "Chirikof", "Kodiak", "Yakutat", "Southeastern")
# Exclude data from 1981, 1984 and 1987 (survey methods were standardized in 1990):
preyWT = subset(preyWT, Yr!=1981)
preyWT = subset(preyWT, Yr!=1984)
preyWT = subset(preyWT, Yr!=1987)
# Select only predators of interest:
preyWT = subset(preyWT, Species_name==c("PACIFIC HALIBUT", "ARROWTOOTH FLOUNDR"))
# Limit data to size classes of interest (30 to 69 cm):
preyWT_red = subset(preyWT, PredL > 29)
preyWT_red = subset(preyWT_red, PredL < 70)
table(preyWT_red$Species_name)
# Set 10 cm fork length bins (30-39, 40-49, 50-59, 60-69):
preyWT_red$FLBin = cut(preyWT_red$PredL, breaks = c(0, 29, 39, 49, 59, 69, 171))
levels(preyWT_red$FLBin) = c("<30", "30-39", "40-49", "50-59", "60-69", ">=70")
table(preyWT_red$Species_name, preyWT_red$PredL, preyWT_red$FLBin) # Check
levels(data$Len_bin) = c("<30", "30-39", "40-49", "50-59", "60-69", ">70")
################################################################
# Join spatial and diet data:
require(dplyr)
require(stats)
#I think I need to do a bit of data manipulation to get my data to look more like cheryls which is in a wide format
#I believe that her data is formatted so each line is a predator and the prey items are listed as columns within the pred stomach
#I need to create a unique identifier for each predator
data <- data %>%
mutate(uniqueID = paste(HAULJOIN, PRED_NODC, PRED_SPECN), sep = "")
#I think I need to do a bit of data manipulation to get my data to look more like cheryls which is in a wide format
#I believe that her data is formatted so each line is a predator and the prey items are listed as columns within the pred stomach
#I need to create a unique identifier for each predator
data <- data %>%
mutate(uniqueID = paste(HAULJOIN, PRED_NODC, PRED_SPECN), sep = "")
#I think I need to do a bit of data manipulation to get my data to look more like cheryls which is in a wide format
#I believe that her data is formatted so each line is a predator and the prey items are listed as columns within the pred stomach
#I need to create a unique identifier for each predator
data <- data %>%
mutate(uniqueID = paste(HAULJOIN, PRED_NODC, PRED_SPECN), sep = "",
pres_absent = ifelse(PREY_TWT > 0, 1, 0))
test <- data %>%
pivot_wider(names_from = Prey_Name, values_from = pres_absent)
View(test)
#I think I need to do a bit of data manipulation to get my data to look more like cheryls which is in a wide format
#I believe that her data is formatted so each line is a predator and the prey items are listed as columns within the pred stomach
#I need to create a unique identifier for each predator
data <- data %>%
mutate(uniqueID = paste(HAULJOIN, PRED_NODC, PRED_SPECN), sep = "",
pres_absent = ifelse(PREY_TWT > 0, 1, 0)) %>%
pivot_wider(names_from = Prey_Name, values_from = pres_absent)
#Exclude data before 1990
data <- data %>%
filter(Year >= 1990)
#Select only predators of interest
data <- data %>%
filter(Pred_common %in% c("Walleye pollock", "Pacific cod", "Pacific halibut", "Arrowtooth flounder"))
#set 10cm fork length bins
data <- data %>%
mutate(Len_bin = cut(PRED_LEN, breaks = c(0, 29, 39, 49, 59, 69, 1000)))
levels(data$Len_bin) = c("<30", "30-39", "40-49", "50-59", "60-69", ">70")
#remove empty stomachs
data <- data %>%
filter(Prey_Name != "Empty")
#I think I need to do a bit of data manipulation to get my data to look more like cheryls which is in a wide format
#I believe that her data is formatted so each line is a predator and the prey items are listed as columns within the pred stomach
#I need to create a unique identifier for each predator
data <- data %>%
mutate(uniqueID = paste(HAULJOIN, PRED_NODC, PRED_SPECN), sep = "",
pres_absent = ifelse(PREY_TWT > 0, 1, 0)) %>%
pivot_wider(names_from = Prey_Name, values_from = pres_absent)
data <- raw_stomach_contents2021
#create unique haul identifier
#?????????? I'm not sure why she created another haul identifier when there was already a HaulJoin Column?
data$Haul_Join <- paste(data$VESSEL, data$CRUISE, data$HAUL, sep = "")
#Exclude data before 1990
data <- data %>%
filter(Year >= 1990)
#Select only predators of interest
data <- data %>%
filter(Pred_common %in% c("Walleye pollock", "Pacific cod", "Pacific halibut", "Arrowtooth flounder"))
#set 10cm fork length bins
data <- data %>%
mutate(Len_bin = cut(PRED_LEN, breaks = c(0, 29, 39, 49, 59, 69, 1000)))
levels(data$Len_bin) = c("<30", "30-39", "40-49", "50-59", "60-69", ">70")
#remove empty stomachs
data <- data %>%
filter(Prey_Name != "Empty")
#I think I need to do a bit of data manipulation to get my data to look more like cheryls which is in a wide format
#I believe that her data is formatted so each line is a predator and the prey items are listed as columns within the pred stomach
#I need to create a unique identifier for each predator
data <- data %>%
mutate(uniqueID = paste(HAULJOIN, PRED_NODC, PRED_SPECN), sep = "",
pres_absent = ifelse(PREY_TWT > 0, 1, 0)) %>%
pivot_wider(names_from = Prey_Name, values_from = pres_absent)
View(data)
data <- raw_stomach_contents2021
#create unique haul identifier
#?????????? I'm not sure why she created another haul identifier when there was already a HaulJoin Column?
data$Haul_Join <- paste(data$VESSEL, data$CRUISE, data$HAUL, sep = "")
#Next she manually assigned INPFC areas to strata areas, but I don't think I have to do this because there already is a INPFC column in my data
strata <- data %>% distinct(STRATUM, INPFC_AREA)
#Exclude data before 1990
data <- data %>%
filter(Year >= 1990)
#Select only predators of interest
data <- data %>%
filter(Pred_common %in% c("Walleye pollock", "Pacific cod", "Pacific halibut", "Arrowtooth flounder"))
#set 10cm fork length bins
data <- data %>%
mutate(Len_bin = cut(PRED_LEN, breaks = c(0, 29, 39, 49, 59, 69, 1000)))
levels(data$Len_bin) = c("<30", "30-39", "40-49", "50-59", "60-69", ">70")
#remove empty stomachs
data <- data %>%
filter(Prey_Name != "Empty")
#I think I need to do a bit of data manipulation to get my data to look more like cheryls which is in a wide format
#I believe that her data is formatted so each line is a predator and the prey items are listed as columns within the pred stomach
#I need to create a unique identifier for each predator
test <- data %>%
mutate(uniqueID = paste(HAULJOIN, PRED_NODC, PRED_SPECN), sep = "",
pres_absent = ifelse(PREY_TWT > 0, 1, 0)) %>%
pivot_wider(names_from = Prey_Name, values_from = pres_absent)
#I think I need to do a bit of data manipulation to get my data to look more like cheryls which is in a wide format
#I believe that her data is formatted so each line is a predator and the prey items are listed as columns within the pred stomach
#I need to create a unique identifier for each predator
test <- data %>%
mutate(uniqueID = paste(HAULJOIN, PRED_NODC, PRED_SPECN), sep = "",
pres_absent = ifelse(PREY_TWT > 0, 1, 0)) %>%
distinct(uniqueID, PREY_NODC, Year, Month, Day, Haul_Join, RLAT, RLONG, GEAR_DEPTH, BOTTOM_DEPTH, START_HOUR,
SURFACE_TEMP, GEAR_TEMP, INPFC_AREA, START_DATE, Len_bin) %>%
pivot_wider(names_from = Prey_Name, values_from = pres_absent)
#I think I need to do a bit of data manipulation to get my data to look more like cheryls which is in a wide format
#I believe that her data is formatted so each line is a predator and the prey items are listed as columns within the pred stomach
#I need to create a unique identifier for each predator
test <- data %>%
mutate(uniqueID = paste(HAULJOIN, PRED_NODC, PRED_SPECN), sep = "",
pres_absent = ifelse(PREY_TWT > 0, 1, 0)) %>%
distinct(uniqueID, PREY_NODC, Year, Month, Day, Haul_Join, RLAT, RLONG, GEAR_DEPTH, BOTTOM_DEPTH, START_HOUR,
SURFACE_TEMP, GEAR_TEMP, INPFC_AREA, START_DATE, Len_bin, Prey_Name) %>%
pivot_wider(names_from = Prey_Name, values_from = pres_absent)
#I think I need to do a bit of data manipulation to get my data to look more like cheryls which is in a wide format
#I believe that her data is formatted so each line is a predator and the prey items are listed as columns within the pred stomach
#I need to create a unique identifier for each predator
test <- data %>%
mutate(uniqueID = paste(HAULJOIN, PRED_NODC, PRED_SPECN), sep = "",
pres_absent = ifelse(PREY_TWT > 0, 1, 0)) %>%
distinct(uniqueID, PREY_NODC, Year, Month, Day, Haul_Join, RLAT, RLONG, GEAR_DEPTH, BOTTOM_DEPTH, START_HOUR,
SURFACE_TEMP, GEAR_TEMP, INPFC_AREA, START_DATE, Len_bin, Prey_Name, pres_absent) %>%
pivot_wider(names_from = Prey_Name, values_from = pres_absent)
#I think I need to do a bit of data manipulation to get my data to look more like cheryls which is in a wide format
#I believe that her data is formatted so each line is a predator and the prey items are listed as columns within the pred stomach
#I need to create a unique identifier for each predator
test <- data %>%
mutate(uniqueID = paste(HAULJOIN, PRED_NODC, PRED_SPECN), sep = "",
pres_absent = ifelse(PREY_TWT > 0, 1, 0)) %>%
distinct(uniqueID, Year, Month, Day, Haul_Join, RLAT, RLONG, GEAR_DEPTH, BOTTOM_DEPTH, START_HOUR,
SURFACE_TEMP, GEAR_TEMP, INPFC_AREA, START_DATE, Len_bin, Prey_Name, pres_absent) %>% #This big chunk is to get rid of redundancies
pivot_wider(names_from = Prey_Name, values_from = pres_absent)
#I think I need to do a bit of data manipulation to get my data to look more like cheryls which is in a wide format
#I believe that her data is formatted so each line is a predator and the prey items are listed as columns within the pred stomach
#I need to create a unique identifier for each predator
wide_data <- data %>%
mutate(uniqueID = paste(HAULJOIN, PRED_NODC, PRED_SPECN), sep = "",
pres_absent = ifelse(PREY_TWT > 0, 1, 0)) %>%
distinct(uniqueID, Year, Month, Day, Haul_Join, RLAT, RLONG, GEAR_DEPTH, BOTTOM_DEPTH, START_HOUR,
SURFACE_TEMP, GEAR_TEMP, INPFC_AREA, START_DATE, Len_bin, Prey_Name, pres_absent) %>% #This big chunk is to get rid of redundancies
pivot_wider(names_from = Prey_Name, values_from = pres_absent)
#check that the each stomach is it's own unique line
length(unique(wide_data$uniqueID))
#I think I need to do a bit of data manipulation to get my data to look more like cheryls which is in a wide format
#I believe that her data is formatted so each line is a predator and the prey items are listed as columns within the pred stomach
#I need to create a unique identifier for each predator
wide_data <- data %>%
mutate(uniqueID = paste(HAULJOIN, PRED_NODC, PRED_SPECN), sep = "",
pres_absent = ifelse(PREY_TWT > 0, 1, 0)) %>%
distinct(uniqueID, Year, Month, Day, Haul_Join, RLAT, RLONG, GEAR_DEPTH, BOTTOM_DEPTH, START_HOUR,
SURFACE_TEMP, GEAR_TEMP, INPFC_AREA, START_DATE, Len_bin, Prey_Name, pres_absent) %>% #This big chunk is to get rid of redundancies
pivot_wider(names_from = Prey_Name, values_from = pres_absent, values_fill = list(pres_absent = 0))
View(wide_data)
#I think I need to do a bit of data manipulation to get my data to look more like cheryls which is in a wide format
#I believe that her data is formatted so each line is a predator and the prey items are listed as columns within the pred stomach
#I need to create a unique identifier for each predator
wide_data <- data %>%
mutate(uniqueID = paste(HAULJOIN, PRED_NODC, PRED_SPECN), sep = "",
pres_absent = ifelse(PREY_TWT > 0, 1, 0)) %>%
distinct(uniqueID, Year, Month, Day, Haul_Join, RLAT, RLONG, GEAR_DEPTH, BOTTOM_DEPTH, START_HOUR,
SURFACE_TEMP, GEAR_TEMP, INPFC_AREA, START_DATE, Len_bin, Pred_common, Prey_Name, pres_absent) %>% #This big chunk is to get rid of redundancies
pivot_wider(names_from = Prey_Name, values_from = pres_absent, values_fill = list(pres_absent = 0))
#check that the each stomach is it's own unique line
length(unique(wide_data$uniqueID))
#Model 1 will look at euphausiids in walleye pollock stomachs
Model1 <- wide_data %>%
filter(Pred_common == "Walleye pollock")
View(Model1)
#Model 1 will look at euphausiids in walleye pollock stomachs
Model1 <- wide_data %>%
filter(Pred_common == "Walleye pollock") %>%
select(uniqueID, Year, Month, Day, Haul_Join, RLAT, RLONG, GEAR_DEPTH, BOTTOM_DEPTH, START_HOUR,
SURFACE_TEMP, GEAR_TEMP, INPFC_AREA, START_DATE, Len_bin, Pred_common, Euphausiacea)
################################################################
### INITIAL DATA PREPARATION ###
################################################################
# Prepare and format AFSC bottom trawl survey data:
# These data include all survey tows conducted between 1984 and 2017, including those with and without our species of interest.
trawl = read.csv("Data/AFSC_TrawlData_1984_2017.csv")
################################################################
### INITIAL DATA PREPARATION ###
################################################################
# Prepare and format AFSC bottom trawl survey data:
# These data include all survey tows conducted between 1984 and 2017, including those with and without our species of interest.
trawl = read.csv(here("ResourcePartitioning_Burch/Data/AFSC_TrawlData_1984_2017.csv"))
# Relabel species codes: 10110 = Arrowtooth Flounder (ATF), 10120 = Pacific Halibut (PH), 20510 = Sablefish (SBL), 21720 = Pacific Cod (PC), 21740 = Walleye Pollock (WEP)
trawl$SPECIES_CODE = as.factor(trawl$SPECIES_CODE)
trawl$Species = trawl$SPECIES_CODE
levels(trawl$Species) = list(ATF="10110", PH="10120", SBL="20510", PC="21720", WEP="21740")
# Manually assign International North Pacific Fisheries Commissionstatistical areas (i.e., values) based on survey strata (i.e., index). Note: The second number from the right corresponds with individual statistical areas (e.g., STRATUM 120 = StatArea 620, STRATUM 251 = StatArea 650).
index = c(unique(trawl$STRATUM))
values = c("650", "650", "650", "650", "650", "640", "640", "640", "640", "640", "640", "640", "640", "620", "640", "620",
"640", "610", "650", "610", "650", "610", "610", "610", "610", "610", "610", "610", "610", "610", "620", "620",
"620", "620", "620", "630", "630", "630", "630", "630", "630", "630", "630", "640", "640", "630", "630", "630",
"630", "630", "620", "620", "620", "620", "630", "630", "630", "650", "650")
trawl$StatArea = values[match(trawl$STRATUM, index)]
table(trawl$STRATUM, trawl$StatArea) # Check
# Exclude data from 1984 and 1987 (survey methods were standardized in 1990):
trawl = subset(trawl, YEAR!=1984)
trawl = subset(trawl, YEAR!=1987)
# Treat survey year as a factor for all models:
trawl$YEAR = as.factor(trawl$YEAR)
# Create unique haul identifier by concatenating VESSEL, CRUISE, and HAUL (allows for joining to proportional length data below):
trawl$Haul_Join = paste(trawl$VESSEL, trawl$CRUISE, trawl$HAUL, sep="")
# Convert data from long to wide format (allows for joining to proportional length data below):
require(reshape2)
trawl_wide = dcast(trawl, YEAR + HAULJOIN + VESSEL + CRUISE + Haul_Join + STRATUM + DISTANCE_FISHED + NET_WIDTH + STATIONID + START_LATITUDE + START_LONGITUDE + GEAR_DEPTH + GEAR_TEMPERATURE + StatArea ~ Species, value.var="NUMCPUE")
# Remove other species (i.e., PC, SBL, and WEP) from data frame:
trawl_wide = trawl_wide[,1:16]
################################################################
### ADJUST HAUL-SPECIFIC CPUE TO MATCH SIZE CLASS OF INTEREST ###
################################################################
# Adjust haul-specific CPUE estimates (number per hectare) to reflect species-specific proportions of fish measuring within the size class of interest (30 to 69 cm fork length). Note: 100 to 200 fish were subsampled for length measurements per haul. Length data were provided by the RACE Division, Alaska Fisheries Science Center (NMFS, NOAA) upon request. We reduced the size of the following CSV file to meet size limitations imposed by GitHub (i.e., unnecessary columns were removed prior to import).
lengths = read.csv(here("ResourcePartitioning_Burch/Data/race_length_by_haul_PH_ATFred.csv", header=T))
################################################################
### ADJUST HAUL-SPECIFIC CPUE TO MATCH SIZE CLASS OF INTEREST ###
################################################################
# Adjust haul-specific CPUE estimates (number per hectare) to reflect species-specific proportions of fish measuring within the size class of interest (30 to 69 cm fork length). Note: 100 to 200 fish were subsampled for length measurements per haul. Length data were provided by the RACE Division, Alaska Fisheries Science Center (NMFS, NOAA) upon request. We reduced the size of the following CSV file to meet size limitations imposed by GitHub (i.e., unnecessary columns were removed prior to import).
lengths = read.csv(here("ResourcePartitioning_Burch/Data/race_length_by_haul_PH_ATFred.csv"))
# Convert fork length units from mm to cm:
lengths$Length..cm. = lengths$Length..mm./10
# Exclude data from 1984 and 1987:
lengths = subset(lengths, Year!=1984)
lengths = subset(lengths, Year!=1987)
# Create unique haul identifier by concatenating VESSEL, CRUISE, and HAUL (allows for joining to trawl data prepared above):
lengths$Haul_Join = paste(lengths$Vessel.Number, lengths$Cruise.Number, lengths$Haul.Number, sep="")
# Calculate total number of fish observed for each fork length:
require(splitstackshape)
LFreq = expandRows(lengths, "Frequency")
# Limit data to size classes of interest (30 to 69 cm):
LFreq_red = subset(LFreq, Length..cm. > 29)
LFreq_red = subset(LFreq_red, Length..cm. < 70)
# Calculate species-specific number of fish per haul:
# Separate out Pacific Halibut (PH):
PH_all = subset(LFreq, SPECIES=="PH") # all lengths
PH_red = subset(LFreq_red, SPECIES=="PH") # 30-69 cm FL only
# Calculate total number (all size classes) of PH, by haul:
PH_1 = table(PH_all$Haul_Join, PH_all$SPECIES)
PH_1 = as.data.frame(PH_1)
PH_1 = subset(PH_1, Var2=="PH")
# Calculate haul-specific number of PH measuring 30-69 cm:
PH_2 = table(PH_red$Haul_Join, PH_red$SPECIES)
PH_2 = as.data.frame(PH_2)
PH_2 = subset(PH_2, Var2=="PH")
# Calcualte proportion of haul measuring 30 to 69 cm:
PHprop = merge(PH_1, PH_2, by="Var1", all=TRUE)
PHprop = PHprop[,c(1:3,5)]
colnames(PHprop) = c("Haul_Join", "Species", "PH_All", "PH_30_69")
PHprop[is.na(PHprop)] = 0
PHprop$PHprop = PHprop$PH_30_69 / PHprop$PH_All
# Separate out Arrowtooth Flounder (ATF):
ATF_all = subset(LFreq, SPECIES=="ATF") # all lengths
ATF_red = subset(LFreq_red, SPECIES=="ATF") # 30-69 cm FL only
# Calculate total number (all size classes) of ATF, by haul:
ATF_1 = table(ATF_all$Haul_Join, ATF_all$SPECIES)
ATF_1 = as.data.frame(ATF_1)
ATF_1 = subset(ATF_1, Var2=="ATF")
# Calculate haul-specific number of ATF measuring 30-69 cm:
ATF_2 = table(ATF_red$Haul_Join, ATF_red$SPECIES)
ATF_2 = as.data.frame(ATF_2)
ATF_2 = subset(ATF_2, Var2=="ATF")
# Calcualte proportion of haul measuring 30 to 69 cm:
ATFprop = merge(ATF_1, ATF_2, by="Var1", all=TRUE)
ATFprop = ATFprop[,c(1:3,5)]
colnames(ATFprop) = c("Haul_Join", "Species", "ATF_All", "ATF_30_69")
ATFprop[is.na(ATFprop)] = 0
ATFprop$ATFprop = ATFprop$ATF_30_69 / ATFprop$ATF_All
# Join bottom trawl survey and proportional length data:
require(dplyr)
Lengthprop = merge(ATFprop, PHprop, by = "Haul_Join", all = TRUE)
trawl_wide_30_69 = trawl_wide %>% left_join(Lengthprop)
# Remove unnecessary columns:
trawl_wide_30_69 = trawl_wide_30_69[,c(1:16,18:20,22:24)]
# Replace NAs with zeros:
trawl_wide_30_69[,17:22][is.na(trawl_wide_30_69[,17:22])] = 0
# Calculate adjusted CPUE (number per ha) based on proportional catch of 30 to 69 cm size class:
trawl_wide_30_69$adjCPUE_ATF = trawl_wide_30_69$ATF * trawl_wide_30_69$ATFprop
trawl_wide_30_69$adjCPUE_PH = trawl_wide_30_69$PH * trawl_wide_30_69$PHprop
################################################################
### MODEL FITTING AND PLOTTING ###
################################################################
require(mgcv)
require(lme4)
require(MuMIn)
options(na.action = "na.fail")
require(sp)
require(maps)
require(mapdata)
require(visreg)
require(ggplot2)
require(PBSmapping)
# Ensure that the same tows are included in each model by removing those with incomplete environmental data (i.e., rows with missing depths or bottom temperatures):
trawl_comp = subset(trawl_wide_30_69, !is.na(GEAR_DEPTH))
trawl_comp = subset(trawl_comp, !is.na(GEAR_TEMPERATURE))
################################################################
### Model presence-absence (P/A) for Pacific Halibut ###
# Label each haul as being present or absent for P. Halibut:
trawl_comp$PHpa = as.numeric(trawl_comp$adjCPUE_PH > 0)
# Remove the extreme outlying station in considerably deep water:
trawl_compSub = subset(trawl_comp, Haul_Join!="148201101201")
View(trawl_compSub)
#remove any NAs
Model1 <- na.omit(Model1)
#Model 1 will look at euphausiids in walleye pollock stomachs
Model1 <- wide_data %>%
filter(Pred_common == "Walleye pollock") %>%
select(uniqueID, Year, Month, Day, Haul_Join, RLAT, RLONG, GEAR_DEPTH, BOTTOM_DEPTH, START_HOUR,
SURFACE_TEMP, GEAR_TEMP, INPFC_AREA, START_DATE, Len_bin, Pred_common, Euphausiacea)
#remove any NAs
Model1 <- na.omit(Model1)
test <- gam(Euphausiacea ~ Year + s(RLONG, RLAT) + s(GEAR_DEPTH) + s(GEAR_TEMP, k = 4),
data = Model1,
family = binomial(link = logit),
method="GCV.Cp")
test_select <- dredge(test, beta = F, evaluate = T, rank = "AIC", trace = F)
require(mgcv)
require(lme4)
require(MuMIn)
options(na.action = "na.fail")
require(sp)
require(maps)
require(mapdata)
require(visreg)
require(ggplot2)
require(PBSmapping)
# Ensure that the same tows are included in each model by removing those with incomplete environmental data (i.e., rows with missing depths or bottom temperatures):
trawl_comp = subset(trawl_wide_30_69, !is.na(GEAR_DEPTH))
trawl_comp = subset(trawl_comp, !is.na(GEAR_TEMPERATURE))
# Label each haul as being present or absent for P. Halibut:
trawl_comp$PHpa = as.numeric(trawl_comp$adjCPUE_PH > 0)
# Remove the extreme outlying station in considerably deep water:
trawl_compSub = subset(trawl_comp, Haul_Join!="148201101201")
# Run the full (global) model:
PH.pa.gam_full = gam(PHpa ~ YEAR + s(START_LONGITUDE, START_LATITUDE) + s(GEAR_DEPTH) + s(GEAR_TEMPERATURE, k=4), data = trawl_compSub, family = binomial(link=logit), method="GCV.Cp")
summary(PH.pa.gam_full)
# Generate all possible alternative models and select the best-fit based on delta AIC:
PH.pa.gam_select = dredge(PH.pa.gam_full, beta=FALSE, evaluate=TRUE, rank="AIC", trace=FALSE)
summary(test)
test <- gam(Euphausiacea ~ Year + s(RLONG, RLAT) + s(GEAR_DEPTH) + s(GEAR_TEMP, k = 4) + Len_bin,
data = Model1,
family = binomial(link = logit),
method="GCV.Cp")
summary(test)

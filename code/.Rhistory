r.bar <- mean(rt_output, na.rm = T)
r.bar
r.se <- sd(rt_output/sqrt(27), na.rm = T)
r.se
#now run model 1000 times
#create vector output (did pop drop below the quasi extinction threshold)
output <- rep(x = NA, times = 1000)
n.loops <- length(years)
for (j in 1:1000) {
mu <- rnorm(1, mean = r.bar, sd = r.se) #homework
Nt <- rep(x = NA, times = tmax)
rt <- rnorm(n = length(years), mean = mu, sd = sigma)
Nt[1] <- N0
for (i in 2:n.loops) Nt[i] <- exp(rt[i-1]) * Nt[i-1]
minpop <- min(Nt)
extinct <- ifelse(minpop < Nextinct, yes = 1, no = 0)
output[j] <- extinct
}
#extinction probability
sum(output)/1000
r.bar
r.se
sigma
#HOMEWORK PART 2
#calculating rt
griz.cub <- grizzly$Observed_Females_cubs
rt_output <- rep(x = NA, times = length(griz.cub))
for (i in 1:length(griz.cub)) {
n.t <- griz.cub[i]
n.t.plus.1 <- griz.cub[i+1]
rt_output[i] <- log(n.t.plus.1/n.t) #using lambda to calculate rt log to compensate for geometric mean
}
#calculate r bar
#mu <- mean(rt_output, na.rm = T)
#homework
r.bar <- mean(rt_output, na.rm = T)
rt_output_cub <- rep(x = NA, times = length(griz.cub))
for (i in 1:length(griz.cub)) {
n.t <- griz.cub[i]
n.t.plus.1 <- griz.cub[i+1]
rt_output_cub[i] <- log(n.t.plus.1/n.t) #using lambda to calculate rt log to compensate for geometric mean
}
#calculate r bar
#mu <- mean(rt_output, na.rm = T)
#homework
r.bar.cub <- mean(rt_output_cub, na.rm = T)
r.se.cub <- sd(rt_output_cub/sqrt(27), na.rm = T)
#calculate sigma
sigma.cub <- sd(rt_output_cub, na.rm = T)
#HOMEWORK PART 2
#calculating rt
griz.cub <- grizzly$Observed_Females_cubs
rt_output <- rep(x = NA, times = length(griz.cub))
for (i in 1:length(griz.cub)) {
n.t <- griz.cub[i]
n.t.plus.1 <- griz.cub[i+1]
rt_output[i] <- log(n.t.plus.1/n.t) #using lambda to calculate rt log to compensate for geometric mean
}
#calculate r bar
#mu <- mean(rt_output, na.rm = T)
#homework
r.bar <- mean(rt_output, na.rm = T)
r.se <- sd(rt_output/sqrt(27), na.rm = T)
#calculate sigma
sigma <- sd(rt_output, na.rm = T)
#using this info to run model
#setting parameters
N0 <- 51
tmax <- 100
Nextinct <- 27
years <- 0:tmax
#generating vectors
Nt <- rep(x = NA, times = length(years))
rt <- rnorm(n = length(years), mean = mu, sd = sigma)
#assign the starting value of population density
Nt[1] <- N0
#create loop to calculate Nt using density-independent stochastic equation
n.loops <- length(years)
for(i in 2:n.loops) Nt[i] <- exp(rt[i-1]) * Nt[i-1] #no curly brackets because it is on one line
#minimum population size
minpop <- min(Nt)
#assign 1 to extinct if the min pop is les than the extinction threshold otherwise value 0
extinct <- ifelse(minpop < Nextinct, yes = 1, no = 0)
#now run model 1000 times
#create vector output (did pop drop below the quasi extinction threshold)
output <- rep(x = NA, times = 1000)
n.loops <- length(years)
for (j in 1:1000) {
mu <- rnorm(1, mean = r.bar, sd = r.se) #homework
Nt <- rep(x = NA, times = tmax)
rt <- rnorm(n = length(years), mean = mu, sd = sigma)
Nt[1] <- N0
for (i in 2:n.loops) Nt[i] <- exp(rt[i-1]) * Nt[i-1]
minpop <- min(Nt)
extinct <- ifelse(minpop < Nextinct, yes = 1, no = 0)
output[j] <- extinct
}
#extinction probability
sum(output)/1000
#calculating rt
griz.fem <- grizzly$Est_Total_Females
rt_output <- rep(x = NA, times = length(griz.fem))
for (i in 1:length(griz.fem)) {
n.t <- griz.fem[i]
n.t.plus.1 <- griz.fem[i+1]
rt_output[i] <- log(n.t.plus.1/n.t) #using lambda to calculate rt log to compensate for geometric mean
}
#calculate r bar
#mu <- mean(rt_output, na.rm = T)
#homework
r.bar <- mean(rt_output, na.rm = T)
r.bar
r.se <- sd(rt_output/sqrt(27), na.rm = T)
r.se
#calculate sigma
sigma <- sd(rt_output, na.rm = T)
sigma
r.se <- sd(rt_output/sqrt(27), na.rm = T)
r.se
#calculate sigma
sigma <- sd(rt_output, na.rm = T)
sigma
r.se
#calculate sigma
sigma <- sd(rt_output, na.rm = T)
#using this info to run model
#setting parameters
N0 <- 139
tmax <- 100
Nextinct <- 75
years <- 0:tmax
#generating vectors
Nt <- rep(x = NA, times = length(years))
rt <- rnorm(n = length(years), mean = mu, sd = sigma)
#assign the starting value of population density
Nt[1] <- N0
#create loop to calculate Nt using density-independent stochastic equation
n.loops <- length(years)
for(i in 2:n.loops) Nt[i] <- exp(rt[i-1]) * Nt[i-1] #no curly brackets because it is on one line
#minimum population size
minpop <- min(Nt)
#assign 1 to extinct if the min pop is les than the extinction threshold otherwise value 0
extinct <- ifelse(minpop < Nextinct, yes = 1, no = 0)
#now run model 1000 times
#create vector output (did pop drop below the quasi extinction threshold)
output <- rep(x = NA, times = 1000)
n.loops <- length(years)
for (j in 1:1000) {
mu <- rnorm(1, mean = r.bar, sd = r.se) #homework
Nt <- rep(x = NA, times = tmax)
rt <- rnorm(n = length(years), mean = mu, sd = sigma)
Nt[1] <- N0
for (i in 2:n.loops) Nt[i] <- exp(rt[i-1]) * Nt[i-1]
minpop <- min(Nt)
extinct <- ifelse(minpop < Nextinct, yes = 1, no = 0)
output[j] <- extinct
}
view(output)
#extinction probability
sum(output)/1000
#HOMEWORK PART 1
#loaded the grizzly data manually
#calculating rt
griz.fem <- grizzly$Est_Total_Females
rt_output <- rep(x = NA, times = length(griz.fem))
for (i in 1:length(griz.fem)) {
n.t <- griz.fem[i]
n.t.plus.1 <- griz.fem[i+1]
rt_output[i] <- log(n.t.plus.1/n.t) #using lambda to calculate rt log to compensate for geometric mean
}
#calculate r bar
#mu <- mean(rt_output, na.rm = T)
#homework
r.bar <- mean(rt_output, na.rm = T)
r.se <- sd(rt_output/sqrt(27), na.rm = T)
#calculate sigma
sigma <- sd(rt_output, na.rm = T)
#using this info to run model
#setting parameters
N0 <- 139
tmax <- 100
Nextinct <- 75
years <- 0:tmax
#generating vectors
Nt <- rep(x = NA, times = length(years))
rt <- rnorm(n = length(years), mean = mu, sd = sigma)
#assign the starting value of population density
Nt[1] <- N0
#create loop to calculate Nt using density-independent stochastic equation
n.loops <- length(years)
for(i in 2:n.loops) Nt[i] <- exp(rt[i-1]) * Nt[i-1] #no curly brackets because it is on one line
#minimum population size
minpop <- min(Nt)
#assign 1 to extinct if the min pop is les than the extinction threshold otherwise value 0
extinct <- ifelse(minpop < Nextinct, yes = 1, no = 0)
#now run model 1000 times
#create vector output (did pop drop below the quasi extinction threshold)
output <- rep(x = NA, times = 1000)
n.loops <- length(years)
for (j in 1:1000) {
mu <- rnorm(1, mean = r.bar, sd = r.se) #homework
Nt <- rep(x = NA, times = tmax)
rt <- rnorm(n = length(years), mean = mu, sd = sigma)
Nt[1] <- N0
for (i in 2:n.loops) Nt[i] <- exp(rt[i-1]) * Nt[i-1]
minpop <- min(Nt)
extinct <- ifelse(minpop < Nextinct, yes = 1, no = 0)
output[j] <- extinct
}
#view(output)
#extinction probability
sum(output)/1000
#HOMEWORK PART 1
#loaded the grizzly data manually
#calculating rt
griz.fem <- grizzly$Est_Total_Females
rt_output <- rep(x = NA, times = length(griz.fem))
for (i in 1:length(griz.fem)) {
n.t <- griz.fem[i]
n.t.plus.1 <- griz.fem[i+1]
rt_output[i] <- log(n.t.plus.1/n.t) #using lambda to calculate rt log to compensate for geometric mean
}
#calculate r bar
#mu <- mean(rt_output, na.rm = T)
#homework
r.bar <- mean(rt_output, na.rm = T)
r.se <- sd(rt_output/sqrt(27), na.rm = T)
#calculate sigma
sigma <- sd(rt_output, na.rm = T)
#using this info to run model
#setting parameters
N0 <- 139
tmax <- 100
Nextinct <- 75
years <- 0:tmax
#generating vectors
Nt <- rep(x = NA, times = length(years))
rt <- rnorm(n = length(years), mean = mu, sd = sigma)
#assign the starting value of population density
Nt[1] <- N0
#create loop to calculate Nt using density-independent stochastic equation
n.loops <- length(years)
for(i in 2:n.loops) Nt[i] <- exp(rt[i-1]) * Nt[i-1] #no curly brackets because it is on one line
#minimum population size
minpop <- min(Nt)
#assign 1 to extinct if the min pop is les than the extinction threshold otherwise value 0
extinct <- ifelse(minpop < Nextinct, yes = 1, no = 0)
#now run model 1000 times
#create vector output (did pop drop below the quasi extinction threshold)
output <- rep(x = NA, times = 1000)
n.loops <- length(years)
for (j in 1:1000) {
mu <- rnorm(1, mean = r.bar, sd = r.se) #homework
Nt <- rep(x = NA, times = tmax)
rt <- rnorm(n = length(years), mean = mu, sd = sigma)
Nt[1] <- N0
for (i in 2:n.loops) Nt[i] <- exp(rt[i-1]) * Nt[i-1]
minpop <- min(Nt)
extinct <- ifelse(minpop < Nextinct, yes = 1, no = 0)
output[j] <- extinct
}
#view(output)
#extinction probability
sum(output)/1000
#HOMEWORK PART 1
#loaded the grizzly data manually
#calculating rt
griz.fem <- grizzly$Est_Total_Females
rt_output <- rep(x = NA, times = length(griz.fem))
for (i in 1:length(griz.fem)) {
n.t <- griz.fem[i]
n.t.plus.1 <- griz.fem[i+1]
rt_output[i] <- log(n.t.plus.1/n.t) #using lambda to calculate rt log to compensate for geometric mean
}
#calculate r bar
#mu <- mean(rt_output, na.rm = T)
#homework
r.bar <- mean(rt_output, na.rm = T)
r.se <- sd(rt_output/sqrt(27), na.rm = T)
#calculate sigma
sigma <- sd(rt_output, na.rm = T)
#using this info to run model
#setting parameters
N0 <- 139
tmax <- 100
Nextinct <- 75
years <- 0:tmax
#generating vectors
Nt <- rep(x = NA, times = length(years))
rt <- rnorm(n = length(years), mean = mu, sd = sigma)
#assign the starting value of population density
Nt[1] <- N0
#create loop to calculate Nt using density-independent stochastic equation
n.loops <- length(years)
for(i in 2:n.loops) Nt[i] <- exp(rt[i-1]) * Nt[i-1] #no curly brackets because it is on one line
#minimum population size
minpop <- min(Nt)
#assign 1 to extinct if the min pop is les than the extinction threshold otherwise value 0
extinct <- ifelse(minpop < Nextinct, yes = 1, no = 0)
#now run model 1000 times
#create vector output (did pop drop below the quasi extinction threshold)
output <- rep(x = NA, times = 1000)
n.loops <- length(years)
for (j in 1:1000) {
mu <- rnorm(1, mean = r.bar, sd = r.se) #homework
Nt <- rep(x = NA, times = tmax)
rt <- rnorm(n = length(years), mean = mu, sd = sigma)
Nt[1] <- N0
for (i in 2:n.loops) Nt[i] <- exp(rt[i-1]) * Nt[i-1]
minpop <- min(Nt)
extinct <- ifelse(minpop < Nextinct, yes = 1, no = 0)
output[j] <- extinct
}
#view(output)
#extinction probability
sum(output)/1000
#HOMEWORK PART 1
#loaded the grizzly data manually
#calculating rt
griz.fem <- grizzly$Est_Total_Females
rt_output <- rep(x = NA, times = length(griz.fem))
for (i in 1:length(griz.fem)) {
n.t <- griz.fem[i]
n.t.plus.1 <- griz.fem[i+1]
rt_output[i] <- log(n.t.plus.1/n.t) #using lambda to calculate rt log to compensate for geometric mean
}
#calculate r bar
#mu <- mean(rt_output, na.rm = T)
#homework
r.bar <- mean(rt_output, na.rm = T)
r.se <- sd(rt_output/sqrt(27), na.rm = T)
#calculate sigma
sigma <- sd(rt_output, na.rm = T)
#using this info to run model
#setting parameters
N0 <- 139
tmax <- 100
Nextinct <- 75
years <- 0:tmax
#generating vectors
Nt <- rep(x = NA, times = length(years))
rt <- rnorm(n = length(years), mean = mu, sd = sigma)
#assign the starting value of population density
Nt[1] <- N0
#create loop to calculate Nt using density-independent stochastic equation
n.loops <- length(years)
for(i in 2:n.loops) Nt[i] <- exp(rt[i-1]) * Nt[i-1] #no curly brackets because it is on one line
#minimum population size
minpop <- min(Nt)
#assign 1 to extinct if the min pop is les than the extinction threshold otherwise value 0
extinct <- ifelse(minpop < Nextinct, yes = 1, no = 0)
#now run model 1000 times
#create vector output (did pop drop below the quasi extinction threshold)
output <- rep(x = NA, times = 1000)
n.loops <- length(years)
for (j in 1:1000) {
mu <- rnorm(1, mean = r.bar, sd = r.se) #homework
Nt <- rep(x = NA, times = tmax)
rt <- rnorm(n = length(years), mean = mu, sd = sigma)
Nt[1] <- N0
for (i in 2:n.loops) Nt[i] <- exp(rt[i-1]) * Nt[i-1]
minpop <- min(Nt)
extinct <- ifelse(minpop < Nextinct, yes = 1, no = 0)
output[j] <- extinct
}
#view(output)
#extinction probability
sum(output)/1000
griz.cub <- grizzly$Observed_Females_cubs
rt_output <- rep(x = NA, times = length(griz.cub))
for (i in 1:length(griz.cub)) {
n.t <- griz.cub[i]
n.t.plus.1 <- griz.cub[i+1]
rt_output[i] <- log(n.t.plus.1/n.t) #using lambda to calculate rt log to compensate for geometric mean
}
#calculate r bar
#mu <- mean(rt_output, na.rm = T)
#homework
r.bar <- mean(rt_output, na.rm = T)
r.se <- sd(rt_output/sqrt(27), na.rm = T)
#calculate sigma
sigma <- sd(rt_output, na.rm = T)
#using this info to run model
#setting parameters
N0 <- 51
tmax <- 100
Nextinct <- 27
years <- 0:tmax
#generating vectors
Nt <- rep(x = NA, times = length(years))
rt <- rnorm(n = length(years), mean = mu, sd = sigma)
#assign the starting value of population density
Nt[1] <- N0
#create loop to calculate Nt using density-independent stochastic equation
n.loops <- length(years)
for(i in 2:n.loops) Nt[i] <- exp(rt[i-1]) * Nt[i-1] #no curly brackets because it is on one line
#minimum population size
minpop <- min(Nt)
#assign 1 to extinct if the min pop is les than the extinction threshold otherwise value 0
extinct <- ifelse(minpop < Nextinct, yes = 1, no = 0)
#now run model 1000 times
#create vector output (did pop drop below the quasi extinction threshold)
output <- rep(x = NA, times = 1000)
n.loops <- length(years)
for (j in 1:1000) {
mu <- rnorm(1, mean = r.bar, sd = r.se) #homework
Nt <- rep(x = NA, times = tmax)
rt <- rnorm(n = length(years), mean = mu, sd = sigma)
Nt[1] <- N0
for (i in 2:n.loops) Nt[i] <- exp(rt[i-1]) * Nt[i-1]
minpop <- min(Nt)
extinct <- ifelse(minpop < Nextinct, yes = 1, no = 0)
output[j] <- extinct
}
view(output)
#extinction probability
sum(output)/1000
r.bar
r.se <- sd(rt_output/sqrt(27), na.rm = T)
r.se
sigma
#extinction probability
sum(output)/1000
#Load libraries
library(readr)
library(tidyverse)
library(here)
library(patchwork)
library(igraph)
library(ggraph)
#Some basic data manipulation to start
raw_stomach_contents2021 <- read_csv(here("data/GOA_Raw_StomachContents2021.csv"))
View(raw_stomach_contents2021)
ggplot(raw_stomach_contents2021, aes(x = years, y = SURFACE_TEMP)) +
geom_point()
ggplot(raw_stomach_contents2021, aes(x = Year, y = SURFACE_TEMP)) +
geom_point()
#Which Predators should I include?
stomach_contents_2021 <- sc_groupings %>%
mutate(uniqueID = paste(HAULJOIN, PRED_NODC, PRED_SPECN,  sep = "_"))
stomach_contents_2021 <- raw_stomach_contents2021 %>%
mutate(uniqueID = paste(HAULJOIN, PRED_NODC, PRED_SPECN,  sep = "_"))
#create unique ID for each predator sampled
stomach_contents_2021 <- raw_stomach_contents2021 %>%
mutate(uniqueID = paste(HAULJOIN, PRED_NODC, PRED_SPECN,  sep = "_")) %>%
distinct(uniqueID)
View(stomach_contents_2021)
#create unique ID for each predator sampled
stomach_contents_2021 <- raw_stomach_contents2021 %>%
mutate(uniqueID = paste(HAULJOIN, PRED_NODC, PRED_SPECN,  sep = "_")) %>%
select(Year, uniqueID, Pred_Name)
#create unique ID for each predator sampled
stomach_contents_2021 <- raw_stomach_contents2021 %>%
mutate(uniqueID = paste(HAULJOIN, PRED_NODC, PRED_SPECN,  sep = "_")) %>%
select(Year, uniqueID, Pred_Species)
#create unique ID for each predator sampled
stomach_contents_2021 <- raw_stomach_contents2021 %>%
mutate(uniqueID = paste(HAULJOIN, PRED_NODC, PRED_SPECN,  sep = "_")) %>%
select(Year, uniqueID, Pred_Species) %>%
distinct(Year, uniqueID, Pred_Species)
#create unique ID for each predator sampled
stomach_contents_2021 <- raw_stomach_contents2021 %>%
mutate(uniqueID = paste(HAULJOIN, PRED_NODC, PRED_SPECN,  sep = "_")) %>%
select(Year, uniqueID, Pred_Species) %>%
distinct(Year, uniqueID, Pred_Species) %>%
group_by(Year, Pred_Species) %>%
mutate(n = n(uniqueID))
#create unique ID for each predator sampled
stomach_contents_2021 <- raw_stomach_contents2021 %>%
mutate(uniqueID = paste(HAULJOIN, PRED_NODC, PRED_SPECN,  sep = "_")) %>%
select(Year, uniqueID, Pred_Species) %>%
distinct(Year, uniqueID, Pred_Species) %>%
group_by(Year, Pred_Species) %>%
mutate(n = length(unique(uniqueID)))
#This chunk calculates the number of predators of each species sampled for each year
stomach_contents_2021 <- raw_stomach_contents2021 %>%
mutate(uniqueID = paste(HAULJOIN, PRED_NODC, PRED_SPECN,  sep = "_")) %>%
select(Year, uniqueID, Pred_Species) %>%
distinct(Year, uniqueID, Pred_Species) %>%
group_by(Year, Pred_Species) %>%
mutate(n = length(unique(uniqueID))) %>%
distinct(Year, Pred_Species, n)
#This chunk calculates the number of predators of each species sampled for each year
stomach_contents_2021 <- raw_stomach_contents2021 %>%
mutate(uniqueID = paste(HAULJOIN, PRED_NODC, PRED_SPECN,  sep = "_")) %>%
select(Year, uniqueID, Pred_Species, Pred_common) %>%
distinct(Year, uniqueID, Pred_Species, Pred_common) %>%
group_by(Year, Pred_Species) %>%
mutate(n = length(unique(uniqueID))) %>%
distinct(Year, Pred_Species, Pred_common, n)
#This chunk calculates the number of predators of each species sampled for each year
stomach_contents_2021 <- raw_stomach_contents2021 %>%
mutate(uniqueID = paste(HAULJOIN, PRED_NODC, PRED_SPECN,  sep = "_")) %>%
select(Year, uniqueID, Pred_Species, Pred_common) %>%
distinct(Year, uniqueID, Pred_Species, Pred_common) %>%
group_by(Year, Pred_Species) %>%
mutate(n_stomachs = length(unique(uniqueID))) %>%
distinct(Year, Pred_Species, Pred_common, n_stomachs)
#This chunk calculates the number of predators of each species sampled for each year
Predator_sample_size <- raw_stomach_contents2021 %>%
mutate(uniqueID = paste(HAULJOIN, PRED_NODC, PRED_SPECN,  sep = "_")) %>%
select(Year, uniqueID, Pred_Species, Pred_common) %>%
distinct(Year, uniqueID, Pred_Species, Pred_common) %>%
group_by(Year, Pred_Species) %>%
mutate(n_stomachs = length(unique(uniqueID))) %>%
distinct(Year, Pred_Species, Pred_common, n_stomachs)
View(Predator_sample_size)
write.csv(Predator_sample_size, here("output/summary_tables", row.names = F))
write.csv(Predator_sample_size, here("output/summary_tables", row.names.data.frame = F))
write.csv(Predator_sample_size, here("output/summary_tables"))
write.csv(Predator_sample_size, here("output/summary_tables"))
write.csv(Predator_sample_size, here("output/summary_tables"))

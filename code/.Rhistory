Total_Weight, Percent_Weight)
diet_proportions_table <- sc_groupings %>%
filter(PRED_FULL != 1) %>% #removing empty stomachs
group_by(Pred_common, Year, INPFC_AREA, Len_bin) %>%
mutate(TotalPredN = length(unique(uniqueID)), #calculating the number of predator stomachs
TotalWeight = sum(PREY_TWT)) %>% #calculating the total stomach weight for each predator
group_by(Pred_common, Prey_Name, Year, INPFC_AREA, Len_bin) %>%
mutate(NStomachs = length(unique(uniqueID)),
Percent_Occur = NStomachs/TotalPredN*100,
Percent_Weight = (TotalWeight/sum(TotalWeight))*100) %>%
select(Year, INPFC_AREA, Pred_Species, Pred_common, Len_bin,
TotalPredN, NStomachs, Percent_Occur,
TotalWeight, Percent_Weight)
diet_proportions_table <- sc_groupings %>%
filter(PRED_FULL != 1) %>% #removing empty stomachs
group_by(Pred_common, Year, INPFC_AREA, Len_bin) %>%
mutate(TotalPredN = length(unique(uniqueID))) %>%  #calculating the number of predator stomachs
group_by(Pred_common, Prey_Name_Clean, Year, INPFC_AREA, Len_bin) %>%
mutate(NStomachs = length(unique(uniqueID)),
Percent_Occur = NStomachs/TotalPredN*100,
TotalWeight = sum(PREY_TWT),  #calculating the total stomach weight for each predator
Percent_Weight = (TotalWeight/sum(TotalWeight))*100) %>%
select(Year, INPFC_AREA, Pred_Species, Pred_common, Len_bin, Prey_Name_Clean,
TotalPredN, NStomachs, Percent_Occur,
TotalWeight, Percent_Weight)
View(diet_proportions_table)
diet_proportions_table <- sc_groupings %>%
filter(PRED_FULL != 1) %>% #removing empty stomachs
group_by(Pred_common, Year, INPFC_AREA, Len_bin) %>%
mutate(TotalWeight = sum(PREY_TWT), #calculating the total stomach weight for each predator
TotalPredN = length(unique(uniqueID))) %>%  #calculating the number of predator stomachs
group_by(Pred_common, Prey_Name_Clean, Year, INPFC_AREA, Len_bin) %>%
mutate(NStomachs = length(unique(uniqueID)),
Percent_Occur = NStomachs/TotalPredN*100,  #calculating the total stomach weight for each predator
Percent_Weight = (sum(PREY_TWT/TotalWeight)*100)) %>%
select(Year, INPFC_AREA, Pred_Species, Pred_common, Len_bin, Prey_Name_Clean,
TotalPredN, NStomachs, Percent_Occur,
TotalWeight, Percent_Weight)
diet_proportions_table <- sc_groupings %>%
filter(PRED_FULL != 1) %>% #removing empty stomachs
group_by(Pred_common, Year, INPFC_AREA, Len_bin) %>%
mutate(TotalWeight = sum(PREY_TWT), #calculating the total stomach weight for each predator
TotalPredN = length(unique(uniqueID))) %>%  #calculating the number of predator stomachs
group_by(Pred_common, Prey_Name_Clean, Year, INPFC_AREA, Len_bin) %>%
mutate(NStomachs = length(unique(uniqueID)),
Percent_Occur = NStomachs/TotalPredN*100,  #calculating the total stomach weight for each predator
Percent_Weight = (sum(PREY_TWT)/TotalWeight)*100) %>%
select(Year, INPFC_AREA, Pred_Species, Pred_common, Len_bin, Prey_Name_Clean,
TotalPredN, NStomachs, Percent_Occur,
TotalWeight, Percent_Weight)
diet_proportions_table <- sc_groupings %>%
filter(PRED_FULL != 1) %>% #removing empty stomachs
group_by(Pred_common, Year, INPFC_AREA, Len_bin) %>%
mutate(TotalWeight = sum(PREY_TWT), #calculating the total stomach weight for each predator
TotalPredN = length(unique(uniqueID))) %>%  #calculating the number of predator stomachs
group_by(Pred_common, Prey_Name_Clean, Year, INPFC_AREA, Len_bin) %>%
mutate(NStomachs = length(unique(uniqueID)),
Percent_Occur = NStomachs/TotalPredN*100,
PreyWeight = sum(PREY_TWT)
Percent_Weight = (PreyWeight/TotalWeight)*100) %>%
select(Year, INPFC_AREA, Pred_Species, Pred_common, Len_bin, Prey_Name_Clean,
TotalPredN, NStomachs, Percent_Occur,
TotalWeight, Percent_Weight)
diet_proportions_table <- sc_groupings %>%
filter(PRED_FULL != 1) %>% #removing empty stomachs
group_by(Pred_common, Year, INPFC_AREA, Len_bin) %>%
mutate(TotalWeight = sum(PREY_TWT), #calculating the total stomach weight for each predator
TotalPredN = length(unique(uniqueID))) %>%  #calculating the number of predator stomachs
group_by(Pred_common, Prey_Name_Clean, Year, INPFC_AREA, Len_bin) %>%
mutate(NStomachs = length(unique(uniqueID)),
Percent_Occur = NStomachs/TotalPredN*100,
PreyWeight = sum(PREY_TWT),
Percent_Weight = (PreyWeight/TotalWeight)*100) %>%
select(Year, INPFC_AREA, Pred_Species, Pred_common, Len_bin, Prey_Name_Clean,
TotalPredN, NStomachs, Percent_Occur,
TotalWeight, PreyWeight, Percent_Weight)
View(network_occurance)
network_simple <- network_sc_filtered %>%
select(Pred_common, uniqueID, Prey_Name, Year, INPFC_AREA, HAULJOIN)
data <- data %>%
group_by(Pred_common, Year, INPFC_AREA) %>%
mutate(TotalPredN = length(unique(ID))) %>%
group_by(Pred_common, Prey_Name, Year, INPFC_AREA) %>%
mutate(NStomachs = length(unique(ID)),
Percent_Occur = NStomachs/TotalPredN*100) %>%
distinct(Pred_common, Prey_Name, Year, INPFC_AREA, TotalPredN, NStomachs, Percent_Occur)
Occur_fun <- function(data, ID) {
data <- data %>%
group_by(Pred_common, Year, INPFC_AREA) %>%
mutate(TotalPredN = length(unique(ID))) %>%
group_by(Pred_common, Prey_Name, Year, INPFC_AREA) %>%
mutate(NStomachs = length(unique(ID)),
Percent_Occur = NStomachs/TotalPredN*100) %>%
distinct(Pred_common, Prey_Name, Year, INPFC_AREA, TotalPredN, NStomachs, Percent_Occur)
return(data)
}
test <- Occur_fun(network_simple, HAULJOIN)
network_simple <- network_sc_filtered %>%
select(Pred_common, uniqueID, Prey_Name, Year, INPFC_AREA, HAULJOIN)
View(network_simple)
test <- Occur_fun(network_simple, HAULJOIN)
#Write a function to calculate Percent Occurrence
Occur_fun <- function(data, x) {
data <- data %>%
group_by(Pred_common, Year, INPFC_AREA) %>%
mutate(TotalPredN = length(unique(x))) %>%
group_by(Pred_common, Prey_Name, Year, INPFC_AREA) %>%
mutate(NStomachs = length(unique(x)),
Percent_Occur = NStomachs/TotalPredN*100) %>%
distinct(Pred_common, Prey_Name, Year, INPFC_AREA, TotalPredN, NStomachs, Percent_Occur)
return(data)
}
test <- Occur_fun(network_simple, HAULJOIN)
test <- Occur_fun(network_simple, 'HAULJOIN')
View(test)
#Write a function to calculate Percent Occurrence
Occur_fun <- function(data) {
data <- data %>%
group_by(Pred_common, Year, INPFC_AREA) %>%
mutate(TotalPredN = length(unique(HAULJOIN))) %>%
group_by(Pred_common, Prey_Name, Year, INPFC_AREA) %>%
mutate(NStomachs = length(unique(HAULJOIN)),
Percent_Occur = NStomachs/TotalPredN*100) %>%
distinct(Pred_common, Prey_Name, Year, INPFC_AREA, TotalPredN, NStomachs, Percent_Occur)
return(data)
}
test <- Occur_fun(network_simple)
data <- data %>%
group_by(Pred_common, Year, INPFC_AREA) %>%
mutate(TotalPredN = length(unique(uniquID))) %>%
group_by(Pred_common, Prey_Name, Year, INPFC_AREA) %>%
mutate(NStomachs = length(unique(uniqueID)),
Percent_Occur = NStomachs/TotalPredN*100) %>%
distinct(Pred_common, Prey_Name, Year, INPFC_AREA, TotalPredN, NStomachs, Percent_Occur)
#Write a function to calculate Percent Occurrence
Occur_fun <- function(data) {
data <- data %>%
group_by(Pred_common, Year, INPFC_AREA) %>%
mutate(TotalPredN = length(unique(uniquID))) %>%
group_by(Pred_common, Prey_Name, Year, INPFC_AREA) %>%
mutate(NStomachs = length(unique(uniqueID)),
Percent_Occur = NStomachs/TotalPredN*100) %>%
distinct(Pred_common, Prey_Name, Year, INPFC_AREA, TotalPredN, NStomachs, Percent_Occur)
return(data)
}
#Create a dataframe with all the info on percent occurrence that I need for the networks
network_occurance <- network_simple %>%
Occur_fun()
#Write a function to calculate Percent Occurrence
Occur_fun <- function(data) {
data <- data %>%
group_by(Pred_common, Year, INPFC_AREA) %>%
mutate(TotalPredN = length(unique(uniqueID))) %>%
group_by(Pred_common, Prey_Name, Year, INPFC_AREA) %>%
mutate(NStomachs = length(unique(uniqueID)),
Percent_Occur = NStomachs/TotalPredN*100) %>%
distinct(Pred_common, Prey_Name, Year, INPFC_AREA, TotalPredN, NStomachs, Percent_Occur)
return(data)
}
#Create a dataframe with all the info on percent occurrence that I need for the networks
network_occurance <- network_simple %>%
Occur_fun()
#Get the dataframes into edge list and node list format
edges.df <- network_occurance %>%
select(Pred_common, Prey_Name, Percent_Occur, NStomachs, Year, INPFC_AREA) %>%
rename(from = Pred_common, to = Prey_Name, weight = Percent_Occur, n = NStomachs)
nodes.df.1 <- network_occurance %>%
ungroup() %>%
select(Prey_Name, Year, INPFC_AREA) %>%
distinct(Prey_Name, Year, INPFC_AREA) %>%
mutate(n = NA) %>%
rename(name = Prey_Name)
nodes.df.2 <- network_occurance %>%
ungroup() %>%
select(Pred_common, Year, INPFC_AREA, TotalPredN) %>%
distinct(Pred_common, Year, INPFC_AREA, TotalPredN) %>%
rename(name = Pred_common, n = TotalPredN)
#I lost the number of predators sampled because I can't have repetative nodes. I think this is ok because
#I have the table that shows the predator sample sizes for each region and year
nodes.df <- rbind(nodes.df.1, nodes.df.2) %>%
distinct(name, Year, INPFC_AREA)
year.region <- nodes.df.2 %>%
filter(name == "Walleye pollock") %>%
select(Year, INPFC_AREA)
year.region <- arrange(year.region, Year, INPFC_AREA)
Years <- year.region$Year
Regions <- year.region$INPFC_AREA
year.list <- vector('list', 45)
#WARNING: IT TAKES 1.15 min to run this loop!
start.time <- Sys.time() #just to check the time on the loop
for(i in 1:length(Years)){
for(j in 1:length(Regions)) {
edges.df.test <- edges.df %>%
filter(Year == Years[i] & INPFC_AREA == Regions[j])
nodes.df.test <- nodes.df %>%
filter(Year == Years[i] & INPFC_AREA == Regions[j])
graph <- graph_from_data_frame(d = edges.df.test, vertices = nodes.df.test, directed = T)
year.list[[i]] <- graph
}
}
#this little chunk is to see how long it takes my computer to run this
end.time <-Sys.time()
time.taken <- round(end.time - start.time, 2)
time.taken
#Load libraries
library(readr)
library(tidyverse)
library(here)
library(patchwork)
library(igraph)
library(ggraph)
#WARNING: IT TAKES 1.15 min to run this loop!
start.time <- Sys.time() #just to check the time on the loop
for(i in 1:length(Years)){
for(j in 1:length(Regions)) {
edges.df.test <- edges.df %>%
filter(Year == Years[i] & INPFC_AREA == Regions[j])
nodes.df.test <- nodes.df %>%
filter(Year == Years[i] & INPFC_AREA == Regions[j])
graph <- graph_from_data_frame(d = edges.df.test, vertices = nodes.df.test, directed = T)
year.list[[i]] <- graph
}
}
#this little chunk is to see how long it takes my computer to run this
end.time <-Sys.time()
time.taken <- round(end.time - start.time, 2)
time.taken
View(year.region)
View(year.list)
network1 <- year.list[[1]]
plot(network1,
vertex.size = 0,
edge.arrow.size = 0.1,
layout = layout_nicely(network1))
groupings <- read_csv(here("output/groupings.csv"))
test <- left_join(network_sc_filtered,groupings,by="Prey_Name")
View(test)
network_sc_filtered <- left_join(network_sc_filtered,groupings,by="Prey_Name")
network_simple <- network_sc_filtered %>%
select(Pred_common, uniqueID, Prey_Name_Networks, Year, INPFC_AREA, HAULJOIN)
#Write a function to calculate Percent Occurrence
Occur_fun <- function(data) {
data <- data %>%
group_by(Pred_common, Year, INPFC_AREA) %>%
mutate(TotalPredN = length(unique(uniqueID))) %>%
group_by(Pred_common, Prey_Name_Networks, Year, INPFC_AREA) %>%
mutate(NStomachs = length(unique(uniqueID)),
Percent_Occur = NStomachs/TotalPredN*100) %>%
distinct(Pred_common, Prey_Name_Networks, Year, INPFC_AREA, TotalPredN, NStomachs, Percent_Occur)
return(data)
}
#Create a dataframe with all the info on percent occurrence that I need for the networks
network_occurance <- network_simple %>%
Occur_fun()
View(network_occurance)
#Get the dataframes into edge list and node list format
edges.df <- network_occurance %>%
select(Pred_common, Prey_Name_Networks, Percent_Occur, NStomachs, Year, INPFC_AREA) %>%
rename(from = Pred_common, to = Prey_Name_Networks, weight = Percent_Occur, n = NStomachs)
nodes.df.1 <- network_occurance %>%
ungroup() %>%
select(Prey_Name_Networks, Year, INPFC_AREA) %>%
distinct(Prey_Name_Networks, Year, INPFC_AREA) %>%
mutate(n = NA) %>%
rename(name = Prey_Name_Networks)
nodes.df.2 <- network_occurance %>%
ungroup() %>%
select(Pred_common, Year, INPFC_AREA, TotalPredN) %>%
distinct(Pred_common, Year, INPFC_AREA, TotalPredN) %>%
rename(name = Pred_common, n = TotalPredN)
#I lost the number of predators sampled because I can't have repetative nodes. I think this is ok because
#I have the table that shows the predator sample sizes for each region and year
nodes.df <- rbind(nodes.df.1, nodes.df.2) %>%
distinct(name, Year, INPFC_AREA)
year.region <- nodes.df.2 %>%
filter(name == "Walleye pollock") %>%
select(Year, INPFC_AREA)
year.region <- arrange(year.region, Year, INPFC_AREA)
Years <- year.region$Year
Regions <- year.region$INPFC_AREA
year.list <- vector('list', 45)
#WARNING: IT TAKES 1.15 min to run this loop!
start.time <- Sys.time() #just to check the time on the loop
for(i in 1:length(Years)){
for(j in 1:length(Regions)) {
edges.df.test <- edges.df %>%
filter(Year == Years[i] & INPFC_AREA == Regions[j])
nodes.df.test <- nodes.df %>%
filter(Year == Years[i] & INPFC_AREA == Regions[j])
graph <- graph_from_data_frame(d = edges.df.test, vertices = nodes.df.test, directed = T)
year.list[[i]] <- graph
}
}
#this little chunk is to see how long it takes my computer to run this
end.time <-Sys.time()
time.taken <- round(end.time - start.time, 2)
time.taken #1.09 min
network_simple <- network_sc_filtered %>%
filter(PRED_FULL != 1) %>%
select(Pred_common, uniqueID, Prey_Name_Networks, Year, INPFC_AREA, HAULJOIN)
View(network_simple)
network_simple <- network_sc_filtered %>%
filter(PRED_FULL != 1) %>%
select(Pred_common, uniqueID, Prey_Name_Networks, Year, INPFC_AREA)
#Create a dataframe with all the info on percent occurrence that I need for the networks
network_occurance <- network_simple %>%
Occur_fun()
View(network_occurance)
#Plot the number of predators sampled vs the number of unique prey observed
test <- network_occurance %>%
group_by(Pred_common, Prey_Name_Networks, Year, INPFC_AREA) %>%
mutate(unique_prey = sum(ifelse(NStomachs >= 1, 1, 0)))
View(test)
#Plot the number of predators sampled vs the number of unique prey observed
test <- network_occurance %>%
group_by(Pred_common, Year, INPFC_AREA) %>%
mutate(unique_prey = sum(ifelse(NStomachs >= 1, 1, 0)))
#Plot the number of predators sampled vs the number of unique prey observed
network_occurance <- network_occurance %>%
group_by(Pred_common, Year, INPFC_AREA) %>%
mutate(unique_prey = sum(ifelse(NStomachs >= 1, 1, 0)))
ggplot(network_occurance, aes(x = TotalPredN, y = unique_prey)) +
geom_point()
ggplot(network_occurance, aes(x = TotalPredN, y = unique_prey)) +
geom_point() +
theme_classic()
ggplot(network_occurance, aes(x = TotalPredN, y = unique_prey, color = Pred_common)) +
geom_point() +
theme_classic()
ggplot(network_occurance, aes(x = TotalPredN, y = unique_prey, color = Pred_common)) +
geom_point() +
xlab("number of unique prey items") +
ylab("number of stomachs sampled") +
theme_classic()
ggplot(network_occurance, aes(x = TotalPredN, y = unique_prey, color = Pred_common)) +
geom_point() +
ylab("number of unique prey items") +
xlab("number of stomachs sampled") +
theme_classic()
ggplot(network_occurance, aes(x = TotalPredN, y = unique_prey, color = Pred_common)) +
geom_point() +
geom_smooth() +
ylab("number of unique prey items") +
xlab("number of stomachs sampled") +
theme_classic()
ggplot(network_occurance, aes(x = TotalPredN, y = unique_prey, color = Pred_common)) +
geom_point() +
geom_smooth(method = "lm") +
ylab("number of unique prey items") +
xlab("number of stomachs sampled") +
theme_classic()
ggplot(network_occurance, aes(x = TotalPredN, y = unique_prey, color = Pred_common)) +
geom_point() +
geom_smooth(method = "log") +
ylab("number of unique prey items") +
xlab("number of stomachs sampled") +
theme_classic()
?geom_smooth
ggplot(network_occurance, aes(x = TotalPredN, y = unique_prey, color = Pred_common)) +
geom_point() +
geom_smooth(method = "glm") +
ylab("number of unique prey items") +
xlab("number of stomachs sampled") +
theme_classic()
ggplot(network_occurance, aes(x = TotalPredN, y = unique_prey, color = Pred_common)) +
geom_point() +
geom_smooth(method = "loess") +
ylab("number of unique prey items") +
xlab("number of stomachs sampled") +
theme_classic()
#practice
edges.df.test <- edges.df %>%
filter(Year == 1990 & INPFC_AREA == 610) %>%
ungroup() %>%
select(from, to)
nodes.df.test <- nodes.df %>%
filter(Year == 1990 & INPFC_AREA == 610) %>%
select(name)
g <- graph_from_data_frame(d = edges.df.test, vertices = nodes.df.test, directed = T)
plot(g,
vertex.label.color = "black",
edge.color = 'gray77',
vertex.size = 0,
edge.arrow.size = 0.1,
layout = layout_nicely(g))
View(edges.df)
strength(network1,
vids = V(network1),
mode = c("all"),
loops = T,
weights = weight)
strength(network1,
vids = V(network1),
mode = c("all"),
loops = T)
test <- strength(network1,
vids = V(network1),
mode = c("all"),
loops = T)
test <- as.data.frame(strength(network1,
vids = V(network1),
mode = c("all"),
loops = T))
View(test)
test <- as.data.frame(strength(network1,
vids = V(network1),
mode = c("in"),
loops = T))
network_simple <- network_sc_filtered %>%
filter(Prey_Name_Networks != "Empty") %>%
select(Pred_common, uniqueID, Prey_Name_Networks, Year, INPFC_AREA)
#Create a dataframe with all the info on percent occurrence that I need for the networks
network_occurance <- network_simple %>%
Occur_fun()
#Get the dataframes into edge list and node list format
edges.df <- network_occurance %>%
select(Pred_common, Prey_Name_Networks, Percent_Occur, NStomachs, Year, INPFC_AREA) %>%
rename(from = Pred_common, to = Prey_Name_Networks, weight = Percent_Occur, n = NStomachs)
nodes.df.1 <- network_occurance %>%
ungroup() %>%
select(Prey_Name_Networks, Year, INPFC_AREA) %>%
distinct(Prey_Name_Networks, Year, INPFC_AREA) %>%
mutate(n = NA) %>%
rename(name = Prey_Name_Networks)
nodes.df.2 <- network_occurance %>%
ungroup() %>%
select(Pred_common, Year, INPFC_AREA, TotalPredN) %>%
distinct(Pred_common, Year, INPFC_AREA, TotalPredN) %>%
rename(name = Pred_common, n = TotalPredN)
#I lost the number of predators sampled because I can't have repetative nodes. I think this is ok because
#I have the table that shows the predator sample sizes for each region and year
nodes.df <- rbind(nodes.df.1, nodes.df.2) %>%
distinct(name, Year, INPFC_AREA)
year.region <- nodes.df.2 %>%
filter(name == "Walleye pollock") %>%
select(Year, INPFC_AREA)
year.region <- arrange(year.region, Year, INPFC_AREA)
Years <- year.region$Year
Regions <- year.region$INPFC_AREA
year.list <- vector('list', 45)
#WARNING: IT TAKES 1.15 min to run this loop!
start.time <- Sys.time() #just to check the time on the loop
for(i in 1:length(Years)){
for(j in 1:length(Regions)) {
edges.df.test <- edges.df %>%
filter(Year == Years[i] & INPFC_AREA == Regions[j])
nodes.df.test <- nodes.df %>%
filter(Year == Years[i] & INPFC_AREA == Regions[j])
graph <- graph_from_data_frame(d = edges.df.test, vertices = nodes.df.test, directed = T)
year.list[[i]] <- graph
}
}
network1 <- year.list[[1]]
plot(network1,
vertex.size = 0,
edge.arrow.size = 0.1,
layout = layout_nicely(network1))
test <- as.data.frame(strength(network1,
vids = V(network1),
mode = c("in"),
loops = T))
netstats.list <- vector('list', 45)
for(i in length(year.list)) {
netstats.list[i] <- as.data.frame(strength(year.list[i],
vids = V(year.list[i]),
mode = c("in"),
loops = T))
}
netstats.list[i] <- as.data.frame(strength(year.list[[i]],
vids = V(year.list[[i]]),
mode = c("in"),
loops = T))
netstats.list[1]
for(i in 1:length(year.list)) {
netstats.list[i] <- as.data.frame(strength(year.list[[i]],
vids = V(year.list[[i]]),
mode = c("in"),
loops = T))
}
netstats.list[1]
netstats.list[2]
view(netstats.list[1])
netstats.list[i] <- as.data.frame(strength(year.list[i],
vids = V(year.list[i]),
mode = c("in"),
loops = T))
network2 <- year.list[[2]]
plot(network2,
vertex.size = 0,
edge.arrow.size = 0.1,
layout = layout_nicely(network1))
plot(network2,
vertex.size = 0,
edge.arrow.size = 0.1,
layout = layout_nicely(network1))
plot(network2,
vertex.size = 0,
edge.arrow.size = 0.1,
layout = layout_nicely(network2))
plot(network2,
vertex.size = 0,
edge.arrow.size = 0.1,
layout = layout_nicely())
plot(network1,
vertex.size = 0,
edge.arrow.size = 0.1,
layout = layout_nicely(network1))
network40 <- year.list[[40]]
plot(network40,
vertex.size = 0,
edge.arrow.size = 0.1,
layout = layout_nicely(network40))

geom_point() ->
fig1
ggplotly(fig1)
data.clean %>%
ggplot(aes(x=LingWt_g, y=LingLength_cm))+
geom_point() ->
fig.1
fig.1
ggplotly(fig1)
unique(data$LingID)
unique(data$LingLength_cm)
unique(data$LingWt_g)
unique(data$PreyOccur)
unique(data$PreyWt_g)
#4. Check for anomalous or missing values
head(data)
unique(data$PreyCode)
data %>%
filter(PreyTaxa == "Empty") %>%
ggplot(aes(x = PreyTaxa, y = PreyWt_g))+
geom_point()
data %>%
filter(PreyTaxa == "Empty") %>%
ggplot(aes(x = PreyTaxa, y = PreyOccur))+
geom_point()
data %>%
filter(PreyTaxa == "Empty") %>%
ggplot(aes(x = PreyTaxa, y = PreyCode))+
geom_point()
#Change the missing Lingcod weight to NA's
data$LingWt_g <- gsub(as.character("0", "NA", data$LingWt_g))
#Change the missing Lingcod weight to NA's
data$LingWt_g <- as.character(gsub("0", "NA", data$LingWt_g))
unique(data$LingWt_g) #there is a 0 value for weight, should this be an N/A instead?
#join datasets
data <-left_join(data.raw, loc)
#converting variables to correct type
data$LingID <- as.integer(data$LingID)
data$PreyOccur <- as.integer(data$PreyOccur)
#sub out the errors
data$PreyTaxa <- gsub("Teleostei unid", "Teleostei NEI", data$PreyTaxa)
data$PreyTaxa <- gsub("Zoarcoidei", "Suborder Zoarcoidei", data$PreyTaxa)
data[data$LingWt_g == 0] <- NA
data %>%
ggplot(aes(x=LingWt_g, y=LingLength_cm))+
geom_point() ->
fig1
ggplotly(fig1)
#I found a couple of lingcod that have no weight measurements
data[data$LingLength_cm == 3.3] <- 33
data$LingWt_g[data$LingWt_g == 0] <- NA
#there is also a lingcod that has a length of 3cm which I think is an error
data$LingLength_cm[data$LingLength_cm == 3.3] <- 33
data$PreyCode
#I found a empty stomach that has a 1 for prey occurrence
if(data$PreyTaxa == "Empty") {
data$PreyCode == 1
} else {
data$PreyCode
} -> data$PreyCode
data %>%
filter(PreyTaxa == "Empty") %>%
ggplot(aes(x = LingID, y = PreyCode))+
geom_point()->
Fig2
ggplotly(Fig2)
data %>%
filter(PreyTaxa == "Empty") %>%
ggplot(aes(x = LingID, y = PreyTaxa))+
geom_point()->
Fig3
ggplotly(Fig3)
data %>%
filter(PreyTaxa == "Empty") %>%
ggplot(aes(x = LingID, y = PreyOccur))+
geom_point()->
Fig3
ggplotly(Fig3)
data %>%
filter(LingID ==578) %>%
mutate(PreyCode = recode(PreyCode, 2 = 1))->
data2
data %>%
filter(LingID ==578) %>%
mutate(PreyCode = recode(PreyCode, 2 = 1))->
data1
data %>%
filter(LingID ==578) %>%
mutate(PreyCode = recode(PreyCode, 2 = 1))->
data
data %>%
filter(LingID ==578)
data %>%
filter(LingID ==578) %>%
mutate(PreyCode = recode(PreyCode, 2 = 1))->
data
data %>%
filter(LingID ==578)
data %>%
filter(LingID ==578) %>%
recode(PreyCode, 2 = 1))->
data
data %>%
filter(LingID ==578) %>%
recode(PreyCode, 2 = 1) ->
data
data %>%
filter(LingID ==578)
data %>%
filter(LingID ==578) %>%
mutate(PreyCode = recode(PreyCode, 2 = 1)) ->
data
data %>%
filter(LingID ==578)
data %>%
filter(LingID ==578) %>%
mutate(PreyCode = recode(PreyCode, '2' = 1)) ->
data
data %>%
filter(LingID ==578)
#Checking that it is correct
data %>%
filter(LingID ==578)
data %>%
filter(LingID ==1139) %>%
mutate(PreyOccur = recode(PreyOccur, '1' = 0)) ->
data
data %>%
filter(LingID ==1139)
data %>%
filter(LingID == 1139)
data %>%
filter(LingID == 1139)
data %>%
filter(LingID ==1530) %>%
mutate(PreyOccur = recode(PreyOccur, '1' = 0)) ->
data
#There is also an empty stomach that has a 2 for prey code when it should be 1
data %>%
filter(PreyTaxa == "Empty") %>%
ggplot(aes(x = LingID, y = PreyOccur))+
geom_point()->
Fig3
ggplotly(Fig3) #LingID = 1139, 1530
#There is also an empty stomach that has a 2 for prey code when it should be 1
data %>%
filter(PreyTaxa == "Empty") %>%
ggplot(aes(x = LingID, y = PreyOccur))+
geom_point()->
Fig3
ggplotly(Fig3) #LingID = 1139, 1530
Fig3
data %>%
filter(PreyTaxa == "Empty") %>%
ggplot(aes(x = LingID, y = PreyCode))+
geom_point()->
Fig2
ggplotly(Fig2) #LingID = 578
View(data)
#Checking that it is correct
data %>%
filter(LingID ==578)
#I'm changing the prey code to the correct value
data %>%
filter(LingID ==578) %>%
mutate(PreyCode = recode(PreyCode, '2' = 1)) ->
data
#join datasets
data <-left_join(data.raw, loc)
#converting variables to correct type
data$LingID <- as.integer(data$LingID)
data$PreyOccur <- as.integer(data$PreyOccur)
#sub out the errors
data$PreyTaxa <- gsub("Teleostei unid", "Teleostei NEI", data$PreyTaxa)
data$PreyTaxa <- gsub("Zoarcoidei", "Suborder Zoarcoidei", data$PreyTaxa)
data$LingWt_g[data$LingWt_g == 0] <- NA
#there is also a lingcod that has a length of 3cm which I think is an error. I'm going to change it from 3.3 to 33
data$LingLength_cm[data$LingLength_cm == 3.3] <- 33
#I'm changing the prey code to the correct value
data %>%
filter(LingID ==578) %>%
mutate(PreyCode = recode(PreyCode, '2' = 1)) ->
data
View(data)
#join datasets
data <-left_join(data.raw, loc)
#converting variables to correct type
data$LingID <- as.integer(data$LingID)
data$PreyOccur <- as.integer(data$PreyOccur)
#sub out the errors
data$PreyTaxa <- gsub("Teleostei unid", "Teleostei NEI", data$PreyTaxa)
data$PreyTaxa <- gsub("Zoarcoidei", "Suborder Zoarcoidei", data$PreyTaxa)
data$LingWt_g[data$LingWt_g == 0] <- NA
#there is also a lingcod that has a length of 3cm which I think is an error. I'm going to change it from 3.3 to 33
data$LingLength_cm[data$LingLength_cm == 3.3] <- 33
#I'm changing the prey code to the correct value
data %>%
filter(LingID ==578) %>%
mutate(PreyCode = recode(PreyCode, '2' = 1)) ->
data1
data %>%
filter(LingID ==1139) %>%
mutate(PreyOccur = recode(PreyOccur, '1' = 0)) ->
data2
data %>%
filter(LingID ==1530) %>%
mutate(PreyOccur = recode(PreyOccur, '1' = 0)) ->
data3
View(data1)
View(data.clean)
View(data)
final.data <-left_join(data.clean, loc)
final.data %>%
filter(PreyTaxa == "Empty") %>%
ggplot(aes(x = LingID, y = PreyCode))+
geom_point()->
Fig.2
Fig.2
final.data %>%
filter(PreyCode > 3) %>%
filter(!PreyTaxa == "Teleostei NEI")->
final.data.2
View(final.data.2)
#------------- PART 4: Visualization --------------------
#Research Question: How does lingcod diet vary in relation to body size
head(final.data.2)
final.data.2 %>%
ggplot(aes(x=LingLength_cm, y = LingWt_g))+
geom_point()+
theme_minimal()
#create power model
model <- lm(log(LingWt_g) ~ log(LingLength_cm))
#create power model
model <- lm(log(final.data.2$LingWt_g) ~ log(final.data.2$LingLength_cm))
lm(formula = log(final.data.2$LingWt_g) ~ log(final.data.2$LingLength_cm))
#create power model
model <- lm(log(y = final.data.2$LingWt_g) ~ log(x = final.data.2$LingLength_cm))
#I wanted to start by looking at length to weight of Lingcod because there is a very clear power growth curve
#Plot length to weight
final.data.2 %>%
ggplot(aes(x=LingLength_cm, y = LingWt_g))+
geom_point()+
theme_minimal()+
geom_smooth(formula = lm(log(y = LingWt_g) ~ log(x = LingLength_cm)))
#I wanted to start by looking at length to weight of Lingcod because there is a very clear power growth curve
#Plot length to weight
final.data.2 %>%
ggplot(aes(x=LingLength_cm, y = LingWt_g))+
geom_point()+
theme_minimal()+
geom_smooth(formula = lm(log(LingWt_g) ~ log(LingLength_cm)))
#I wanted to start by looking at length to weight of Lingcod because there is a very clear power growth curve
#Plot length to weight
final.data.2 %>%
ggplot(aes(x=LingLength_cm, y = LingWt_g))+
geom_point()+
theme_minimal()+
geom_smooth(formula = lm(log(y) ~ log(x)))
#I wanted to start by looking at length to weight of Lingcod because there is a very clear power growth curve
#Plot length to weight
final.data.2 %>%
ggplot(aes(x=LingLength_cm, y = LingWt_g))+
geom_point()+
theme_minimal()+
geom_smooth(method = "lm")
#I wanted to start by looking at length to weight of Lingcod because there is a very clear power growth curve
#Plot length to weight
final.data.2 %>%
ggplot(aes(x=LingLength_cm, y = LingWt_g))+
geom_point()+
theme_minimal()+
geom_smooth(method = "glm")
#I wanted to start by looking at length to weight of Lingcod because there is a very clear power growth curve
#Plot length to weight
final.data.2 %>%
ggplot(aes(x=LingLength_cm, y = LingWt_g))+
geom_point()+
theme_minimal()+
geom_smooth(method = "gam")
#I wanted to start by looking at length to weight of Lingcod because there is a very clear power growth curve
#Plot length to weight
final.data.2 %>%
ggplot(aes(x=LingLength_cm, y = LingWt_g))+
geom_point()+
theme_minimal()+
geom_smooth(method = "loess")
#I wanted to start by looking at length to weight of Lingcod because there is a very clear power growth curve
#Plot length to weight
final.data.2 %>%
ggplot(aes(x=LingLength_cm, y = LingWt_g))+
geom_point()+
theme_minimal()+
stat_smooth(method = "loess")
geom
#I wanted to start by looking at length to weight of Lingcod because there is a very clear power growth curve
#Plot length to weight
final.data.2 %>%
ggplot(aes(x=LingLength_cm, y = LingWt_g))+
geom_point()+
theme_minimal()+
geom_smooth(method = "loess")
#Plot pred weight to prey weight
final.data.2 %>%
ggplot(aes(x=LingWt_g, y = PreyWt_g))+
geom_point()+
theme_minimal()
#Plot pred length to prey number
final.data.2 %>%
ggplot(aes(x=LingLength_cm, y = PreyNum))+
geom_point()+
theme_minimal()
#Percent by Weight %W
#(sum weight of prey type i) / (total weight of all prey) x 100
Weight <-
as.data.frame(summarise(
group_by(final.data.2, PreyTaxa),
TotalWt = sum(PreyWt_g)
))
View(Weight)
Weight$PW <- Weight$TotalWt/sum(Weight$TotalWt)
#next d
Weight$PW <- (Weight$TotalWt/sum(Weight$TotalWt))*100
#next find the total weight of all prey
sum(Weight$TotalWt)
#last calculate percent weight in new column
Weight$PW <- (Weight$TotalWt/10396.51)*100
Weight1 <- Weight[!(Weight$PreyTaxa=="Empty"),]
View(Weight1)
###Percent by Weight %W
#(sum weight of prey type i) / (total weight of all prey) x 100
#First find the sum weight of each prey type
Weight <-
as.data.frame(summarise(
group_by(final.data, PreyTaxa),
TotalWt = sum(PreyWt_g)
))
#next find the total weight of all prey
sum(Weight$TotalWt) #Answer: 10396.51
#last calculate percent weight in new column
Weight$PW <- (Weight$TotalWt/10396.51)*100
###Percent by number %N
#(sum of number of individuals of prey type i) / (total number of all prey) * 100
#We know from the instructions that there were 1764 prey items sampled
Number <-
as.data.frame(summarise(
group_by(final.data, PreyTaxa),
N = sum(PreyNum)
))
View(Number)
TotalN=sum(PreyNum)
#Next find the total number of prey
sum(Number$N)
#calculate percent weight in new column
Number$N <- (Number$N/1443)*100
###Percent by number %N
#(sum of number of individuals of prey type i) / (total number of all prey) * 100
#We know from the instructions that there were 1764 prey items sampled
#First find the sum of number of individuals of each prey type
Number <-
as.data.frame(summarise(
group_by(final.data, PreyTaxa),
N = sum(PreyNum)
))
#calculate percent weight in new column
Number$PN <- (Number$N/1443)*100
Freq <- summarise(group_by(data, PreyTaxa), NStomachs=sum(unique(LingID)*0+1))
View(Freq)
Occur <-
as.data.frame(summarise(
group_by(final.data, PreyTaxa),
Occ = sum(unique(LingID))
))
View(Occur)
Occur <-
as.data.frame(summarise(
group_by(final.data, PreyTaxa),
Occ = sum(unique(LingID)*0+1)
))
#next calculate total number of lincod sampled
sum(unique(LingID)*0+1)
#next calculate total number of lincod sampled
sum(unique(final.data$LingID)*0+1)
#next calculate total number of lincod sampled
Occur$PO <- Occur$Occ/TotalPredN
#next calculate total number of lingcod sampled
Occ
#next calculate total number of lingcod sampled
sum(unique(LingID)*0+1
#next calculate total number of lingcod sampled
sum(unique(data.final$LingID)*0+1
#next calculate total number of lingcod sampled
sum(unique(LingID)*0+1)
#next calculate total number of lingcod sampled
sum(unique(final.data$LingID)*0+1)
Occur$PO <- (Occur$Occ/950)*100
Occur <- Occur[!(Occur$PreyTaxa=="Empty"),]
Occur$PO <- (Occur$Occ/950)*100
#First calculate number of lingcod with more than one prey
Occur <-
as.data.frame(summarise(
group_by(final.data, PreyTaxa),
Occ = sum(unique(LingID)*0+1)
))
#calculate percent occurance
Occur$PO <- (Occur$Occ/950)*100
#merge
DietSummary <- merge(Weight,Number) %>%
merge(Occur)
View(DietSummary)
#plotting proportion by weight vs freq of occurance
ggplot(DietSummary, aes(x=PO, y=PW)) +
geom_point(size = 3, alpha = 0.5)
#plotting proportion by weight vs freq of occurance
ggplot(DietSummary, aes(x=PO, y=PW)) +
geom_point(size = 3, alpha = 0.5)+
theme_minimal
#plotting proportion by weight vs freq of occurance
ggplot(DietSummary, aes(x=PO, y=PW)) +
geom_point(size = 3, alpha = 0.5)+
theme_minimal()
# Calculate diet by season
dat <- final.data %>%
group_by(Season, PreyTaxa) %>%
summarize(sum(PreyWt_g))
colnames(dat)<-c("Season","PreyTaxa","PreyWt")
seasonal <- dat %>% spread(PreyTaxa,PreyWt)
# Calculate cumulative prey curves (rarefaction curves) and set up the data for plotting
dat.sub <- final.data[,c(1,4:5)]
dat.sub <- distinct(dat.sub)
colnames(dat.sub) <- c("LingID","Season","PreyTaxa")
dat.sub$NPred <- 1
dat.long <- dat.sub %>% spread(PreyTaxa,NPred); dat.long[is.na(dat.long)]<-0
dat.winter<-dat.long[dat.long$Season=="Winter",-c(1:2,9)]
dat.spring<-dat.long[dat.long$Season=="Spring",-c(1:2,9)]
dat.summer<-dat.long[dat.long$Season=="Summer",-c(1:2,9)]
dat.fall<-dat.long[dat.long$Season=="Fall",-c(1:2,9)]
cumu.winter <- specaccum(dat.winter)
cumu.winter <- data.frame(Stomachs=cumu.winter$sites, Richness=cumu.winter$richness, SD=cumu.winter$sd) %>%
mutate(Season = "Winter") #Convert object of class specaccum to data frame for plotting in ggplot and add column with season
cumu.spring <- specaccum(dat.spring)
cumu.spring <- data.frame(Stomachs=cumu.spring$sites, Richness=cumu.spring$richness, SD=cumu.spring$sd) %>%
mutate(Season = "Spring")
cumu.summer <- specaccum(dat.summer)
cumu.summer <- data.frame(Stomachs=cumu.summer$sites, Richness=cumu.summer$richness, SD=cumu.summer$sd) %>%
mutate(Season = "Summer")
cumu.fall <- specaccum(dat.fall)
cumu.fall <- data.frame(Stomachs=cumu.fall$sites, Richness=cumu.fall$richness, SD=cumu.fall$sd) %>%
mutate(Season = "fall")
cumu <- bind_rows(cumu.winter,cumu.spring,cumu.summer,cumu.fall) #Combine all seasons into one data frame
# Plot cumulative prey curves (rarefaction curves)
ggplot(cumu, aes(x=Stomachs, y=Richness, colour=Season)) +
geom_line(data=cumu) +
geom_ribbon(data=cumu,aes(ymin=Richness-SD,ymax=Richness+SD, fill=Season),alpha=0.1) +
theme_bw(base_size = 14)
# Stacked bar plots (proportion by weight)
proportion <- data %>%
group_by(Season,PreyTaxa) %>%
summarize(sum(PreyWt_g))
colnames(proportion)<-c("Season","PreyTaxa","Sum")
proportion <- proportion %>%
mutate(Prop = Sum / sum(Sum))
proportion <- proportion[!proportion$PreyTaxa=="Empty",]
colorlist<-c('#e6194b', '#f58231', '#ffe119', '#bcf60c', '#3cb44b', '#46f0f0',
'#4363d8', '#911eb4', '#f032e6', '#800000', '#9A6324',
'#ffd8b1', '#808000', '#fffac8', '#000075', '#008080',
'#aaffc3', '#e6beff', '#a9a9a9') #Extra colors: '#fabebe'
ggplot(proportion, aes(x = Season, Prop, fill = PreyTaxa)) +
geom_bar(stat = "identity", color = "black") +
scale_fill_manual(values = colorlist) +
ylab("Proportion") + xlab("Season") +
theme_bw(base_size = 14)
colorlist<-c('#e6194b', '#f58231', '#ffe119', '#bcf60c', '#3cb44b', '#46f0f0',
'#4363d8', '#911eb4', '#f032e6', '#800000', '#9A6324',
'#ffd8b1', '#808000', '#fffac8', '#000075', '#008080',
'#aaffc3', '#e6beff', '#a9a9a9', '#fabebe') #Extra colors: '#fabebe'
ggplot(proportion, aes(x = Season, Prop, fill = PreyTaxa)) +
geom_bar(stat = "identity", color = "black") +
scale_fill_manual(values = colorlist) +
ylab("Proportion") + xlab("Season") +
theme_bw(base_size = 14)
# Plot cumulative prey curves (rarefaction curves)
ggplot(cumu, aes(x=Stomachs, y=Richness, colour=Season)) +
geom_line(data=cumu) +
geom_ribbon(data=cumu,aes(ymin=Richness-SD,ymax=Richness+SD, fill=Season),alpha=0.1) +
theme_bw(base_size = 14)
View(cumu.fall)
rm(list=ls())
#This is my first look at the food habits data
#edit
#load some libraries
library(readr)
library(tidyverse)
#load in the raw data
raw_prey_length <- read_csv("data/1_Gulf Of Alaska_Raw_PreyLength.csv")
raw_stomach_contents <- read_csv("data/1_Gulf Of Alaska_Raw_StomachContents.csv")
#what type of dataframe is this?
class(raw_prey_length)
class(raw_stomach_contents)
View(raw_prey_length)
View(raw_stomach_contents)
#I want to play around with the data a bit, so how about I subset it to only include year 2019
raw_prey_length %>%
filter(Year == 2019) ->
length.sub
raw_stomach_contents %>%
filter(Year == 2019) ->
stomach.sub
left_join(length.sub, stomach.sub) ->
data
View(data)
left_join(stomach.sub, length.sub) ->
data
